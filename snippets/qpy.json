{"I2C.read(slaveaddress, addr, r_data, datalen, delay)":{"body":"I2C.read (${1:slaveaddress}),(${2: addr}),(${3: r_data}),(${4: datalen}),(${5: delay})","description":"从 I2C 总线中读取数据。\r\n例子：\r\n| 参数         | 类型      | 说明                             |\r\n| ------------ | --------- | -------------------------------- |\r\n| slaveaddress | 16进制    | i2c 设备地址                     |\r\n| addr         | 16进制    | i2c 寄存器地址                   |\r\n| addr_len     | int       | 寄存器地址长度                   |\r\n| r_data       | bytearray | 接收数据的字节数组               |\r\n| datalen      | int       | 字节数组的长度                   |\r\n| delay        | int       | 延时，数据转换缓冲时间（单位ms） |\r\n\r\n* 返回值\r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n\r\n\r\n","prefix":"I2C.read(slaveaddress, addr, r_data, datalen, delay)"},"I2C.write(slaveaddress, addr, data, datalen)":{"body":"I2C.write (${1:slaveaddress}),(${2: addr}),(${3: data}),(${4: datalen})","description":"从 I2C 总线中写入数据。\r\n例子：\r\n| 参数         | 类型      | 说明           |\r\n| ------------ | --------- | -------------- |\r\n| slaveaddress | 16进制    | i2c 设备地址   |\r\n| addr         | 16进制    | i2c 寄存器地址 |\r\n| addr_len     | int       | 寄存器地址长度 |\r\n| data         | bytearray | 写入的数据     |\r\n| datalen      | int       | 写入数据的长度 |\r\n\r\n* 返回值\r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n\r\n\r\n**使用示例**\r\n\r\n需要连接设备使用！\r\n\r\n```python\r\nfrom machine import I2C\r\n\r\nI2C_SLAVE_ADDR = 0x1B  # i2c 设备地址 \r\nWHO_AM_I= bytearray({0x02, 0})   # i2c 寄存器地址，以buff的方式传入，取第一个值，计算一个值的长度\r\n\r\ndata = bytearray({0x12, 0})   # 输入对应指令\r\ni2c_obj = I2C(I2C.I2C0, I2C.STANDARD_MODE)  # 返回i2c对象\r\ni2c_obj.write(I2C_SLAVE_ADDR, WHO_AM_I, 1, data, 2) # 写入data\r\n\r\nr_data = bytearray(2)  # 创建长度为2的字节数组接收\r\ni2c_obj.read(I2C_SLAVE_ADDR, WHO_AM_I, 1, r_data, 2, 0)   # read\r\ni2c_log.info(r_data[0])  \r\ni2c_log.info(r_data[1])\r\n```\r\n\r\n##### WDT \r\n\r\n模块功能：APP应用程序发生异常不执行时进行系统重启操作\r\n\r\n> ​\t**wdt = WDT(period)**\r\n\r\n创建软狗对象。\r\n\r\n- 参数\r\n\r\n| 参数   | 类型 | 说明                       |\r\n| :----- | :--- | -------------------------- |\r\n| period | int  | 设置软狗检测时间，单位(s） |\r\n\r\n* 返回值\r\n\r\n返回软狗对象\r\n\r\n\r\n\r\n> ​\t**wdt.feed()**\r\n\r\n喂狗\r\n\r\n- 参数\r\n\r\n无\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n> ​\t**wdt.stop()**\r\n\r\n关闭软狗功能\r\n\r\n- 参数\r\n\r\n无\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n**使用示例**\r\n\r\n```PYTHON\r\nfrom machine import WDT\r\nfrom machine import Timer\r\n\r\n\r\ntimer1 = Timer(Timer.Timer1)\r\n\r\ndef feed(t):\r\n    wdt.feed()\r\n\r\nif __name__ == '__main__':\r\n    wdt = WDT(20)  # 启动看门狗，间隔时长\r\n    timer1.start(period=15000, mode=timer1.PERIODIC, callback=feed)  # 使用定时器喂狗\r\n    # wdt.stop()\r\n```\r\n\r\n\r\n\r\n#### pm - 低功耗\r\n\r\n模块功能：在无业务处理时使系统进入休眠状态，进入低功耗模式。\r\n\r\n> ​\t**lpm_fd = pm.create_wakelock(lock_name, name_size)**\r\n\r\n创建wake_lock锁\r\n\r\n- 参数\r\n\r\n| 参数      | 类型   | 说明            |\r\n| :-------- | :----- | --------------- |\r\n| lock_name | string | 自定义lock名    |\r\n| name_size | int    | lock_name的长度 |\r\n\r\n* 返回值\r\n\r\n成功返回wakelock的标识号，否则返回-1。\r\n\r\n\r\n\r\n> ​\t**pm.delete_wakelock(lpm_fd)**\r\n\r\n删除wake_lock锁\r\n\r\n- 参数\r\n\r\n| 参数   | 类型 | 说明                   |\r\n| :----- | :--- | ---------------------- |\r\n| lpm_fd | int  | 需要删除的锁对应标识id |\r\n\r\n* 返回值\r\n\r\n成功返回0。\r\n\r\n\r\n\r\n> ​\t**pm.wakelock_lock(lpm_fd)**\r\n\r\n加锁\r\n\r\n- 参数\r\n\r\n| 参数   | 类型 | 说明                             |\r\n| :----- | :--- | -------------------------------- |\r\n| lpm_fd | int  | 需要执行加锁操作的wakelock标识id |\r\n\r\n* 返回值\r\n\r\n成功返回0，否则返回-1。\r\n\r\n\r\n\r\n> ​\t**pm.wakelock_unlock(lpm_fd)**\r\n\r\n加锁\r\n\r\n- 参数\r\n\r\n| 参数   | 类型 | 说明                               |\r\n| :----- | :--- | ---------------------------------- |\r\n| lpm_fd | int  | 需要执行释放锁操作的wakelock标识id |\r\n\r\n* 返回值\r\n\r\n成功返回0，否则返回-1。\r\n\r\n\r\n\r\n> ​\t**pm.autosleep(sleep_flag)**\r\n\r\n自动休眠模式控制\r\n\r\n- 参数\r\n\r\n| 参数       | 类型 | 说明                           |\r\n| :--------- | :--- | ------------------------------ |\r\n| sleep_flag | int  | 0，关闭自动休眠；1开启自动休眠 |\r\n\r\n* 返回值\r\n\r\n成功返回0。\r\n\r\n\r\n\r\n> ​\t**pm.get_wakelock_num()**\r\n\r\n获取已创建的锁数量\r\n\r\n- 参数\r\n\r\n无\r\n\r\n* 返回值\r\n\r\n返回已创建wakelock锁的数量。\r\n\r\n\r\n\r\n**使用示例**\r\n\r\n模拟测试，实际开发请根据业务场景选择使用！\r\n\r\n```python\r\nimport pm\r\nimport utime\r\n\r\n# 创建wakelock锁\r\nlpm_fd = pm.create_wakelock(\"test_lock\", len(\"test_lock\"))\r\n# 设置自动休眠模式\r\npm.autosleep(1)\r\n\r\n# 模拟测试，实际开发请根据业务场景选择使用\r\nwhile 1:\r\n    utime.sleep(20)  # 休眠\r\n    res = pm.wakelock_lock(lpm_fd)\r\n    print(\"ql_lpm_idlelock_lock, g_c1_axi_fd = %d\" %lpm_fd)\r\n    print(\"unlock  sleep\")\r\n    utime.sleep(20)\r\n    res = pm.wakelock_unlock(lpm_fd)\r\n    print(res)\r\n    print(\"ql_lpm_idlelock_unlock, g_c1_axi_fd = %d\" % lpm_fd)\r\n    num = pm.get_wakelock_num()  # 获取已创建锁的数量\r\n    print(num)\r\n```\r\n\r\n\r\n\r\n#### ure - 正则\r\n\r\n模块功能：提供通过正则表达式匹配数据（ps：此re模块目前支持的操作符较少，部分操作符暂不支持）\r\n\r\n**支持操作符：**\r\n\r\n| **字符** | **说明**                                       |\r\n| -------- | ---------------------------------------------- |\r\n| ‘.’      | 匹配任意字符                                   |\r\n| ‘[]’     | 匹配字符集合，支持单个字符和一个范围，包括负集 |\r\n| ‘^’      | 匹配字符串的开头。                             |\r\n| ‘$’      | 匹配字符串的结尾。                             |\r\n| ‘?’      | 匹配零个或前面的子模式之一。                   |\r\n| ‘*’      | 匹配零个或多个先前的子模式。                   |\r\n| ‘+’      | 匹配一个或多个先前的子模式。                   |\r\n| ‘??’     | 非贪婪版本的 ? ，匹配0或1                      |\r\n| ‘*?’     | 非贪婪版本的*，匹配零个或多个                  |\r\n| ‘+?’     | 非贪婪版本的+，匹配一个或多个                  |\r\n| ‘\\|’     | 匹配该操作符的左侧子模式或右侧子模式。         |\r\n| ‘\\d’     | 数字匹配                                       |\r\n| ‘\\D’     | 非数字匹配                                     |\r\n| '\\s'     | 匹配空格                                       |\r\n| '\\S'     | 匹配非空格                                     |\r\n| ‘\\w’     | 匹配”单词字符” (仅限ASCII)                     |\r\n| ‘\\W’     | 匹配非“单词字符”（仅限ASCII）                  |\r\n\r\n**不支持：**\r\n\r\n- 重复次数 (`{m,n}`)\r\n- 命名组 (`(?P<name>...)`)\r\n- 非捕获组(`(?:...)`)\r\n- 更高级的断言(`\\b`, `\\B`)\r\n- 特殊字符转义，如 `\\r`, `\\n` - 改用Python自己的转义。\r\n\r\n\r\n\r\n> ​\t**ure.compile(regex)**\r\n\r\ncompile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。\r\n\r\n- 参数\r\n\r\n| 参数  | 类型   | 说明       |\r\n| :---- | :----- | ---------- |\r\n| regex | string | 正则表达式 |\r\n\r\n* 返回值\r\n\r\n返回 regex 对象\r\n\r\n\r\n\r\n> ​\t**ure.match(regex, string)**\r\n\r\n将正则表达式对象 与 string 匹配，匹配通常从字符串的起始位置进行\r\n\r\n- 参数\r\n\r\n| 参数   | 类型   | 说明                 |\r\n| :----- | :----- | -------------------- |\r\n| regex  | string | 正则表达式           |\r\n| string | string | 需要匹配的字符串数据 |\r\n\r\n* 返回值\r\n\r\n匹配成功返回一个匹配的对象，否则返回None。\r\n\r\n\r\n\r\n> ​\t**ure.search(regex, string)**\r\n\r\nre.search 扫描整个字符串并返回第一个成功的匹配。\r\n\r\n- 参数\r\n\r\n| 参数   | 类型   | 说明                 |\r\n| :----- | :----- | -------------------- |\r\n| regex  | string | 正则表达式           |\r\n| string | string | 需要匹配的字符串数据 |\r\n\r\n* 返回值\r\n\r\n匹配成功返回一个匹配的对象，否则返回None。\r\n\r\n\r\n\r\n**Match 对象**\r\n\r\n匹配由 match() 和 serach 方法返回的对象\r\n\r\n> ​\t**match.group(index)**\r\n\r\n匹配的整个表达式的字符串\r\n\r\n- 参数\r\n\r\n| 参数  | 类型 | 说明                                                         |\r\n| :---- | :--- | ------------------------------------------------------------ |\r\n| index | int  | 正则表达式中的三组括号把匹配结果分成三组，0：返回整体；1：列出第一个括号匹配部分；2： 列出第二个括号匹配部分；3： 列出第三个括号匹配部分 |\r\n\r\n* 返回值\r\n\r\n返回匹配的整个表达式的字符串\r\n\r\n\r\n\r\n> ​\t**match.groups()**\r\n\r\n匹配的整个表达式的字符串\r\n\r\n- 参数\r\n\r\n无\r\n\r\n* 返回值\r\n\r\n返回一个包含该匹配组的所有子字符串的元组。\r\n\r\n\r\n\r\n> ​\t**match.start(index)**\r\n\r\n返回匹配的子字符串组的起始原始字符串中的索引。\r\n\r\n- 参数\r\n\r\n| 参数  | 类型 | 说明                                 |\r\n| :---- | :--- | ------------------------------------ |\r\n| index | int  | index 默认为整个组，否则将选择一个组 |\r\n\r\n* 返回值\r\n\r\n返回匹配的子字符串组的起始原始字符串中的索引。\r\n\r\n\r\n\r\n> ​\t**match.end(index)**\r\n\r\n返回匹配的子字符串组的结束原始字符串中的索引。\r\n\r\n- 参数\r\n\r\n| 参数  | 类型 | 说明                                 |\r\n| :---- | :--- | ------------------------------------ |\r\n| index | int  | index 默认为整个组，否则将选择一个组 |\r\n\r\n* 返回值\r\n\r\n返回匹配的子字符串组的结束原始字符串中的索引。\r\n\r\n\r\n\r\n**使用示例**\r\n\r\n```python\r\nimport ure\r\n\r\nres = '''\r\n$GNRMC,133648.00,A,3149.2969,N,11706.9027,E,0.055,,311020,,,A,V*18\r\n$GNGGA,133648.00,3149.2969,N,11706.9027,E,1,24,1.03,88.9,M,,M,,*6C\r\n$GNGLL,3149.2969,N,11706.9027,E,133648.00,A,A*7A\r\n$GNGSA,A,3,31,26,11,194,27,195,08,09,03,193,04,16,1.41,1.03,0.97,1*31\r\n'''\r\n\r\nr = ure.search(\"GNGGA(.+?)M\", res)\r\nprint(r.group(0))\r\n```\r\n\r\n\r\n\r\n### 第三方库\r\n\r\n#### aLiYun - 阿里云服务\r\n\r\n模块功能：阿里云物联网套件客户端功能,目前的产品节点类型仅支持“设备”，设备认证方式支持“一机一密和“一型一密”。\r\n\r\n","prefix":"I2C.write(slaveaddress, addr, data, datalen)"},"MQTTClient(client_id, server, port=0, user=None, password=None, keepalive=0, ssl=False, ssl_params={})":{"body":"MQTTClient (${1:client_id}),(${2: server}),(${3: port=0}),(${4: user=None}),(${5: password=None}),(${6: keepalive=0}),(${7: ssl=False}),(${8: ssl_params={}})","description":"构建mqtt连接对象。\r\n例子：\r\n| 参数       | 参数类型 | 说明                                                         |\r\n| ---------- | -------- | ------------------------------------------------------------ |\r\n| client_id  | string   | 客户端 ID，具有唯一性                                        |\r\n| server     | string   | 服务端地址，可以是 IP 或者域名                               |\r\n| port       | int      | 服务器端口（可选）。 默认为1883，请注意，MQTT over SSL/TLS的默认端口是8883 |\r\n| user       | string   | （可选) 在服务器上注册的用户名                               |\r\n| password   | string   | （可选) 在服务器上注册的密码                                 |\r\n| keepalive  | int      | （可选）客户端的keepalive超时值。 默认为60秒，范围（60~1200）s |\r\n| ssl        | bool     | （可选）是否使能 SSL/TLS 支持                                |\r\n| ssl_params | string   | （可选）SSL/TLS 参数                                         |\r\n\r\n* 返回值 \r\n\r\nmqtt对象。\r\n\r\n\r\n\r\n","prefix":"MQTTClient(client_id, server, port=0, user=None, password=None, keepalive=0, ssl=False, ssl_params={})"},"MQTTClient.check_msg()":{"body":"MQTTClient.check_msg()","description":"检查服务器是否有待处理消息。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n","prefix":"MQTTClient.check_msg()"},"MQTTClient.connect(clean_session=True)":{"body":"MQTTClient.connect(${1:clean_session=True})","description":"与服务器建立连接。\r\n例子：\r\n| 参数          | 参数类型 | 说明                                                         |\r\n| ------------- | -------- | ------------------------------------------------------------ |\r\n| clean_session | bool     | 可选参数，一个决定客户端类型的布尔值。 如果为True，那么代理将在其断开连接时删除有关此客户端的所有信息。 如果为False，则客户端是持久客户端，当客户端断开连接时，订阅信息和排队消息将被保留。默认为False |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n","prefix":"MQTTClient.connect(clean_session=True)"},"MQTTClient.disconnect()":{"body":"MQTTClient.disconnect()","description":"与服务器断开连接。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n","prefix":"MQTTClient.disconnect()"},"MQTTClient.ping()":{"body":"MQTTClient.ping()","description":"向服务器发送ping包,检测保持连通性\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n","prefix":"MQTTClient.ping()"},"MQTTClient.publish(topic,msg)":{"body":"MQTTClient.publish (${1:topic}),(${2:msg})","description":"发布消息。\r\n例子：\r\n| 参数  | 类型   | 说明           |\r\n| :---- | :----- | -------------- |\r\n| topic | string | 消息主题       |\r\n| msg   | string | 需要发送的数据 |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n","prefix":"MQTTClient.publish(topic,msg)"},"MQTTClient.set_callback(callback)":{"body":"MQTTClient.set_callback(${1:callback})","description":"设置回调函数，收到消息时会被调用。\r\n例子：\r\n| 参数     | 参数类型 | 说明         |\r\n| -------- | -------- | ------------ |\r\n| callback | function | 消息回调函数 |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n","prefix":"MQTTClient.set_callback(callback)"},"MQTTClient.set_last_will(topic,msg,retain=False,qos=0)":{"body":"MQTTClient.set_last_will (${1:topic}),(${2:msg}),(${3:retain=False}),(${4:qos=0})","description":"设置要发送给服务器的遗嘱，客户端没有调用disconnect()异常断开，则发送通知到客户端。\r\n例子：\r\n| 参数   | 参数类型 | 说明                                         |\r\n| ------ | -------- | -------------------------------------------- |\r\n| topic  | string   | 遗嘱主题                                     |\r\n| msg    | string   | 遗嘱的内容                                   |\r\n| retain | bool     | retain = True boker会一直保留消息，默认False |\r\n| qos    | int      | 消息服务质量(0~2)                            |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n","prefix":"MQTTClient.set_last_will(topic,msg,retain=False,qos=0)"},"MQTTClient.subscribe(topic,qos)":{"body":"MQTTClient.subscribe (${1:topic}),(${2:qos})","description":"订阅mqtt主题。\r\n例子：\r\n| 参数  | 类型   | 说明                                  |\r\n| :---- | :----- | ------------------------------------- |\r\n| topic | string | topic                                 |\r\n| qos   | int    | MQTT消息服务质量（默认0，可选择0或1） |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n","prefix":"MQTTClient.subscribe(topic,qos)"},"MQTTClient.wait_msg()":{"body":"MQTTClient.wait_msg()","description":"阻塞等待服务器消息响应。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n#### ntptime - NTP对时\r\n\r\n模块功能：该模块用于时间同步。\r\n\r\n","prefix":"MQTTClient.wait_msg()"},"Pin.read()":{"body":"Pin.read()","description":"获取PIN脚电平。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\nPIN脚电平，0-低电平，1-高电平。\r\n\r\n\r\n\r\n","prefix":"Pin.read()"},"Pin.write(value)":{"body":"Pin.write(${1:value})","description":"设置PIN脚电平。\r\n例子：\r\n| 参数  | 类型 | 说明                                                         |\r\n| ----- | ---- | ------------------------------------------------------------ |\r\n| value | int  | 0 - 当PIN脚为输出模式时，设置当前PIN脚输出低;  <br />1 - 当PIN脚为输出模式时，设置当前PIN脚输出高 |\r\n\r\n* 返回值\r\n\r\n设置成功返回整型值0，设置失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> from machine import Pin\r\n>>> gpio1 = Pin(Pin.GPIO1, Pin.OUT, Pin.PULL_DISABLE, 0)\r\n>>> gpio1.write(1)\r\n0\r\n>>> gpio1.read()\r\n1\r\n```\r\n\r\n\r\n\r\n##### UART\r\n\r\n类功能：uart串口数据传输。\r\n\r\n**常量说明**\r\n\r\n| 常量       | 说明  |\r\n| ---------- | ----- |\r\n| UART.UART0 | UART0 |\r\n| UART.UART1 | UART1 |\r\n| UART.UART2 | UART2 |\r\n| UART.UART3 | UART3 |\r\n\r\n\r\n\r\n**创建uart对象**\r\n\r\n","prefix":"Pin.write(value)"},"Power. getVbatt()":{"body":"Power. getVbatt()","description":"获取电池电压，单位mV。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\nint类型电压值。\r\n\r\n* 示例\r\n\r\n```\r\n>>> Power.getVbatt()\r\n3590\r\n```\r\n\r\n\r\n\r\n##### PWM\r\n\r\n**常量说明**\r\n\r\n| 常量     | 说明 |\r\n| -------- | ---- |\r\n| PWM.PWM0 | PWM0 |\r\n| PWM.PWM1 | PWM1 |\r\n| PWM.PWM2 | PWM2 |\r\n| PWM.PWM3 | PWM3 |\r\n| PWM.PWM4 | PWM4 |\r\n| PWM.PWM5 | PWM5 |\r\n\r\n\r\n\r\n**创建一个pwm对象**\r\n\r\n","prefix":"Power. getVbatt()"},"Power. powerDownReason()":{"body":"Power. powerDownReason()","description":"获取模块上次关机原因。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n1：正常电源关机\r\n\r\n2：电压过高\r\n\r\n3：电压偏低\r\n\r\n4：超温\r\n\r\n5：WDT\r\n\r\n6：VRTC 偏低\r\n\r\n0：未知\r\n\r\n\r\n\r\n","prefix":"Power. powerDownReason()"},"Power. powerOnReason()":{"body":"Power. powerOnReason()","description":"获取模块启动原因。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n返回int数值，解释如下：\r\n\r\n1：正常电源开机 \r\n\r\n2：重启 \r\n\r\n3：VBAT \r\n\r\n4：RTC定时开机\r\n\r\n5：Fault \r\n\r\n6：VBUS\r\n\r\n0：未知\r\n\r\n\r\n\r\n","prefix":"Power. powerOnReason()"},"Power.powerDown()":{"body":"Power.powerDown()","description":"模块关机。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n","prefix":"Power.powerDown()"},"Power.powerRestart()":{"body":"Power.powerRestart()","description":"模块重启。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n","prefix":"Power.powerRestart()"},"TXyun(productID, devicename, devicePsk, ProductSecret)":{"body":"TXyun (${1:productID}),(${2: devicename}),(${3: devicePsk}),(${4: ProductSecret})","description":"配置阿里云物联网套件的产品信息和设备信息。\r\n例子：\r\n| 参数          | 类型   | 说明                                                         |\r\n| :------------ | :----- | ------------------------------------------------------------ |\r\n| productID     | string | 产品标识（唯一ID）                                           |\r\n| ProductSecret | string | 可选参数，默认为None，productSecret，产品密钥<br />一机一密认证方案时，此参数传入None<br/>一型一密认证方案时，此参数传入真实的产品密钥 |\r\n| devicename    | string | 设备名称                                                     |\r\n| devicePsk     | string | 可选参数,默认为Non，设备密钥（一型一密认证方案时此参数传入None） |\r\n\r\n* 返回值\r\n\r\n返回TXyun连接对象。\r\n\r\n\r\n\r\n","prefix":"TXyun(productID, devicename, devicePsk, ProductSecret)"},"TXyun.publish(topic,msg)":{"body":"TXyun.publish (${1:topic}),(${2:msg})","description":"发布消息。\r\n例子：\r\n| 参数  | 类型   | 说明           |\r\n| :---- | :----- | -------------- |\r\n| topic | string | topic          |\r\n| msg   | string | 需要发送的数据 |\r\n\r\n* 返回值 \r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n\r\n\r\n","prefix":"TXyun.publish(topic,msg)"},"TXyun.setCallback(sub_cb)":{"body":"TXyun.setCallback(${1:sub_cb})","description":"注册回调函数。\r\n例子：\r\n| 参数   | 类型     | 说明                                       |\r\n| :----- | :------- | ------------------------------------------ |\r\n| sub_cb | function | 设置消息回调函数，当服务端响应时触发该方法 |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n","prefix":"TXyun.setCallback(sub_cb)"},"TXyun.setMqtt(clean_session, keepAlive)":{"body":"TXyun.setMqtt (${1:clean_session}),(${2: keepAlive})","description":"设置MQTT数据通道的参数\r\n例子：\r\n| 参数          | 类型 | 说明                                                         |\r\n| :------------ | :--- | ------------------------------------------------------------ |\r\n| clean_session | bool | 可选参数，一个决定客户端类型的布尔值。 如果为True，那么代理将在其断开连接时删除有关此客户端的所有信息。 如果为False，则客户端是持久客户端，当客户端断开连接时，订阅信息和排队消息将被保留。默认为False |\r\n| keepAlive     | int  | 通信之间允许的最长时间段（以秒为单位）,默认为300，范围（60-1000），建议300以上 |\r\n\r\n* 返回值\r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n\r\n\r\n","prefix":"TXyun.setMqtt(clean_session, keepAlive)"},"TXyun.start()":{"body":"TXyun.start()","description":"运行连接。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n**使用示例**\r\n\r\n```python\r\nfrom TenCentYun import TXyun\r\n\r\n\r\nproductID = \"\"  # 产品标识\r\ndevicename = \"\"   # 设备名称\r\ndevicePsk = \"\"   # 设备密钥（一型一密认证此参数传入None）\r\nProductSecret = None   # 产品密钥（一机一密认证此参数传入None）\r\n\r\ntenxun = TXyun(productID, devicename, devicePsk, ProductSecret)  # 创建连接对象\r\n\r\ndef sub_cb(topic, msg):   # 云端消息响应回调函数\r\n    print(\"subscribe recv:\")\r\n    print(topic, msg)\r\n\r\ntenxun.setMqtt()\r\ntenxun.setCallback(sub_cb)\r\ntopic = \"\"  # 输入自定义的Topic\r\ntenxun.subscribe(topic)\r\ntenxun.publish(topic, \"hello world\")\r\ntenxun.start()\r\n```\r\n\r\n\r\n\r\n#### request - HTTP\r\n\r\n模块功能：HTTP客户端的相关功能函数。\r\n\r\n","prefix":"TXyun.start()"},"TXyun.subscribe(topic,qos)":{"body":"TXyun.subscribe (${1:topic}),(${2:qos})","description":"订阅mqtt主题。\r\n例子：\r\n| 参数  | 类型   | 说明                                  |\r\n| :---- | :----- | ------------------------------------- |\r\n| topic | string | topic                                 |\r\n| qos   | int    | MQTT消息服务质量（默认0，可选择0或1） |\r\n\r\n* 返回值\r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n\r\n\r\n","prefix":"TXyun.subscribe(topic,qos)"},"_thread.allocate_lock()":{"body":"_thread.allocate_lock()","description":"创建一个互斥锁对象。\r\n例子：\r\n```\r\nimport _thread\r\nlock = _thread.allocate_lock()\r\n```\r\n\r\n\r\n\r\n","prefix":"_thread.allocate_lock()"},"_thread.get_ident()":{"body":"_thread.get_ident()","description":"获取当前线程号。\r\n例子：\r\n","prefix":"_thread.get_ident()"},"_thread.stack_size(size)":{"body":"_thread.stack_size(${1:size})","description":"设置创建新线程使用的栈大小（以字节为单位），默认为8k。\r\n例子：\r\n","prefix":"_thread.stack_size(size)"},"_thread.start_new_thread(function, args)":{"body":"_thread.start_new_thread (${1:function}),(${2: args})","description":"创建一个新线程，接收执行函数和被执行函数参数。\r\n例子：\r\n","prefix":"_thread.start_new_thread(function, args)"},"aLiYun(productKey, productSecret, DeviceName, DeviceSecret)":{"body":"aLiYun (${1:productKey}),(${2: productSecret}),(${3: DeviceName}),(${4: DeviceSecret})","description":"配置阿里云物联网套件的产品信息和设备信息。\r\n例子：\r\n| 参数          | 类型   | 说明                                                         |\r\n| :------------ | :----- | ------------------------------------------------------------ |\r\n| productKey    | string | 产品标识                                                     |\r\n| productSecret | string | 可选参数，默认为None，productSecret，产品密钥<br />一机一密认证方案时，此参数传入None<br/>一型一密认证方案时，此参数传入真实的产品密钥 |\r\n| DeviceName    | string | 设备名称                                                     |\r\n| DeviceSecret  | string | 可选参数,默认为Non，设备密钥（一型一密认证方案时此参数传入None） |\r\n\r\n* 返回值\r\n\r\n返回aLiYun连接对象。\r\n\r\n\r\n\r\n","prefix":"aLiYun(productKey, productSecret, DeviceName, DeviceSecret)"},"aLiYun.publish(topic,msg)":{"body":"aLiYun.publish (${1:topic}),(${2:msg})","description":"发布消息。\r\n例子：\r\n| 参数  | 类型   | 说明           |\r\n| :---- | :----- | -------------- |\r\n| topic | string | topic          |\r\n| msg   | string | 需要发送的数据 |\r\n\r\n* 返回值 \r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n\r\n\r\n","prefix":"aLiYun.publish(topic,msg)"},"aLiYun.setCallback(sub_cb)":{"body":"aLiYun.setCallback(${1:sub_cb})","description":"注册回调函数。\r\n例子：\r\n| 参数   | 类型     | 说明     |\r\n| :----- | :------- | -------- |\r\n| sub_cb | function | 回调函数 |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n","prefix":"aLiYun.setCallback(sub_cb)"},"aLiYun.setMqtt(clientID, clean_session, keepAlive)":{"body":"aLiYun.setMqtt (${1:clientID}),(${2: clean_session}),(${3: keepAlive})","description":"设置MQTT数据通道的参数\r\n例子：\r\n| 参数          | 类型   | 说明                                                         |\r\n| :------------ | :----- | ------------------------------------------------------------ |\r\n| clientID      | string | 自定义阿里云连接id                                           |\r\n| clean_session | bool   | 可选参数，一个决定客户端类型的布尔值。 如果为True，那么代理将在其断开连接时删除有关此客户端的所有信息。 如果为False，则客户端是持久客户端，当客户端断开连接时，订阅信息和排队消息将被保留。默认为False |\r\n| keepAlive     | int    | 通信之间允许的最长时间段（以秒为单位）,默认为300，范围（60-1200） |\r\n\r\n* 返回值\r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n\r\n\r\n","prefix":"aLiYun.setMqtt(clientID, clean_session, keepAlive)"},"aLiYun.start()":{"body":"aLiYun.start()","description":"运行连接。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n**使用示例**\r\n\r\n```python\r\nfrom aLiYun import aLiYun\r\n\r\nproductKey = \"\"     # 产品标识\r\nproductSecret = None  # 产品密钥（一机一密认证此参数传入None）\r\nDeviceName = \"\"     # 设备名称\r\nDeviceSecret = None   # 设备密钥（一型一密认证此参数传入None）\r\n# 创建aliyun连接对象\r\nali = aLiYun(productKey, productSecret, DeviceName, DeviceSecret)\r\n# 设置mqtt连接属性\r\nclientID = \"mqttText\"  # 自定义字符（不超过64）\r\nali.setMqtt(clientID, clean_session=False, keepAlive=300)\r\n# 回调函数\r\ndef sub_cb(topic, msg):\r\n    print(\"subscribe recv:\")\r\n    print(topic, msg)\r\n# 设置回调函数\r\nali.setCallback(sub_cb)\r\ntopic = \"\"  # 主题\r\n# 订阅主题\r\nali.subscribe(topic)\r\n# 发布消息\r\nali.publish(topic, \"hello world\")\r\n# 运行\r\nali.start()\r\n```\r\n\r\n\r\n\r\n#### TenCentYun- 腾讯云服务\r\n\r\n模块功能：腾讯云物联网套件客户端功能,目前的产品节点类型仅支持“设备”，设备认证方式支持“一机一密和“动态注册认证”。\r\n\r\n","prefix":"aLiYun.start()"},"aLiYun.subscribe(topic,qos)":{"body":"aLiYun.subscribe (${1:topic}),(${2:qos})","description":"订阅mqtt主题。\r\n例子：\r\n| 参数  | 类型   | 说明                                  |\r\n| :---- | :----- | ------------------------------------- |\r\n| topic | string | topic                                 |\r\n| qos   | int    | MQTT消息服务质量（默认0，可选择0或1） |\r\n\r\n* 返回值\r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n\r\n\r\n","prefix":"aLiYun.subscribe(topic,qos)"},"adc = ADC()":{"body":"adc = ADC()","description":"* 示例\r\n例子：\r\n>>> adc = ADC()\r\n```\r\n\r\n\r\n\r\n","prefix":"adc = ADC()"},"adc.close()":{"body":"adc.close()","description":"关闭ADC。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n0关闭成功，-1关闭失败。\r\n\r\n\r\n\r\n#### modem - 设备相关\r\n\r\n模块功能：设备信息获取。\r\n\r\n","prefix":"adc.close()"},"adc.open()":{"body":"adc.open()","description":"ADC功能初始化。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回整型0，失败返回整型-1。\r\n\r\n\r\n\r\n","prefix":"adc.open()"},"adc.read(ADCn)":{"body":"adc.read(${1:ADCn})","description":"读取指定通道的电压值，单位mV。\r\n例子：\r\n| 参数 | 参数类型 | 参数说明                                                     |\r\n| ---- | -------- | ------------------------------------------------------------ |\r\n| ADCn | int      | ADC通道<br/>注：EC100YCN平台支持ADC0，ADC1，对应引脚如下<br/>ADC0 – 引脚号39<br/>ADC1 – 引脚号81 |\r\n\r\n* 返回值\r\n\r\n成功返回指定通道电压值，错误返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>>adc.read(ADC.ADC0)  #读取ADC通道0电压值\r\n613\r\n>>>adc.read(ADC.ADC1)  #读取ADC通道1电压值\r\n605\r\n```\r\n\r\n\r\n\r\n","prefix":"adc.read(ADCn)"},"aud = audio.Audio(device)":{"body":"aud = audio.Audio(${1:device})","description":"* 参数\r\n例子：\r\n* 示例\r\n\r\n```\r\n>>> import audio\r\n>>> aud = audio.Audio(1)\r\n```\r\n\r\n\r\n\r\n","prefix":"aud = audio.Audio(device)"},"aud.getState()":{"body":"aud.getState()","description":"获取audio初始化状态。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\naudio初始化未完成返回整型值-1，初始化完成返回整型值0。\r\n\r\n\r\n\r\n","prefix":"aud.getState()"},"aud.getVolume()":{"body":"aud.getVolume()","description":"获取audio音量大小。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n返回整型音量值。\r\n\r\n\r\n\r\n","prefix":"aud.getVolume()"},"aud.play(priority, breakin, filename)":{"body":"aud.play (${1:priority}),(${2: breakin}),(${3: filename})","description":"音频文件播放，支持mp3和amr文件播放。支持优先级0~4，数字越大优先级越高，每个优先级组可同时最多加入10个播放任务，与TTS播放共用同一个播放队列。\r\n例子：\r\n| 参数     | 参数类型 | 参数说明                                      |\r\n| -------- | -------- | --------------------------------------------- |\r\n| priority | int      | 播放优先级，支持优先级0~4，数值越大优先级越高 |\r\n| breakin  | int      | 打断模式，0表示不允许被打断，1表示允许被打断  |\r\n| filename | string   | 待播放的文件名称，包含文件存放路径            |\r\n\r\n* 返回值\r\n\r\n播放成功返回整型0；\r\n\r\n播放失败返回整型-1；\r\n\r\n无法立即播放，加入播放队列，返回整型1；\r\n\r\n无法立即播放，且该请求的优先级组队列任务已达上限，无法加入播放队列，返回整型-2。\r\n\r\n* 示例\r\n\r\n```\r\n>>> import audio\r\n>>> a = audio.Audio(1)\r\n\r\n>>> a.play(2, 1, 'U:/music.mp3')  #文件名前面要加上路径\r\n0\r\n```\r\n\r\n关于文件播放路径的说明：\r\n\r\n用户分区路径固定为’U:/‘开头，表示用户分区的根目录，如果用户在根目录下新建audio目录，并将音频文件存放在根目录下的audio目录，那么播放接口中，传入的路径参数应该是：'U:/audio/music.mp3'。\r\n\r\n* 说明\r\n\r\n由于TTS和音频文件播放共用同一个播放队列，所以TTS中设置的播放优先级、打断模式不仅仅是和其他TTS播放任务比较，还会和音频文件播放任务的优先级和打断模式比较，反之，音频文件播放中设置的播放优先级与打断模式对TTS任务同样是有效的。\r\n\r\n\r\n\r\n","prefix":"aud.play(priority, breakin, filename)"},"aud.setVolume(vol)":{"body":"aud.setVolume(${1:vol})","description":"设置audio音量大小。\r\n例子：\r\n| 参数 | 参数类型 | 参数说明                                   |\r\n| ---- | -------- | ------------------------------------------ |\r\n| vol  | int      | 音量等级，范围（1~11），数值越大，音量越大 |\r\n\r\n* 返回值\r\n\r\n设置成功返回整型0，失败返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> aud.setVolume(6)\r\n0\r\n>>> aud.getVolume()\r\n6\r\n```\r\n\r\n\r\n\r\n#### misc - 其他\r\n\r\n模块功能：提供关机、软件重启、PWM以及ADC相关功能。\r\n\r\n##### Power\r\n\r\n关机以及软件重启。\r\n\r\n使用前导入该类：from misc import Power\r\n\r\n","prefix":"aud.setVolume(vol)"},"aud.stop()":{"body":"aud.stop()","description":"停止音频文件播放。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回整型0，失败返回整型-1。\r\n\r\n\r\n\r\n","prefix":"aud.stop()"},"cellLocator.getLocation(serverAddr, port, token, timeout, profileID)":{"body":"cellLocator.getLocation (${1:serverAddr}),(${2: port}),(${3: token}),(${4: timeout}),(${5: profileID})","description":"获取基站坐标信息。\r\n例子：\r\n| 参数       | 参数类型 | 参数说明                                                     |\r\n| ---------- | -------- | ------------------------------------------------------------ |\r\n| serverAddr | string   | 服务器域名，长度必须小于255 bytes，目前仅支持 “www.queclocator.com” |\r\n| port       | int      | 服务器端口，目前仅支持 80 端口                               |\r\n| token      | string   | 密钥，16位字符组成，需要申请                                 |\r\n| timeout    | int      | 设置超时时间，范围1-300s，默认300s                           |\r\n| profileID  | int      | PDP索引，范围1-8                                             |\r\n\r\n* 返回值\r\n\r\n功返回度格式经纬度坐标信息，返回格式：`(latitude, longtitude, accuracy)`，`(0.0, 0.0, 0)`表示未获取到有效坐标信息；失败返回错误码说明如下：\r\n\r\n-1 – 初始化失败\r\n\r\n-2 – 服务器地址过长（超过255字节）\r\n\r\n-3 – 密钥长度错误，必须为16字节\r\n\r\n-4 – 超时时长超出范围，支持的范围（1~300）s\r\n\r\n-5 – 指定的PDP网络未连接，请确认PDP是否正确\r\n\r\n-6 – 获取坐标出错\r\n\r\n* 示例\r\n\r\n```\r\n>>> import cellLocator\r\n>>> cellLocator.getLocation(\"www.queclocator.com\", 80, \"1111111122222222\", 8, 1)\r\n(117.1138, 31.82279, 550)\r\n# 上面使用的密钥仅为测试密钥\r\n```\r\n\r\n\r\n\r\n#### sim - SIM卡\r\n\r\n模块功能：提供sim卡操作相关API，如查询sim卡状态、iccid、imsi等。\r\n\r\n注意：能成功获取IMSI、ICCID、电话号码的前提是SIM卡状态为1，可通过sim.getStatus()查询。\r\n\r\n","prefix":"cellLocator.getLocation(serverAddr, port, token, timeout, profileID)"},"class uzlib.DecompIO(stream, wbits=0)":{"body":"class uzlib.DecompIO (${1:stream}),(${2: wbits=0})","description":"创建一个`stream`装饰器，该装饰器允许在另一个流中透明地压缩数据。这允许处理数据大于可用堆大小的压缩流。wbits的值除了上面所述的值以外，还可以取值24..31（16 + 8..15），这表示输入流具有gzip标头。\r\n例子：\r\n#### _thread - 多线程\r\n\r\n_thread 模块提供创建新线程的方法，并提供互斥锁。\r\n\r\n","prefix":"class uzlib.DecompIO(stream, wbits=0)"},"dataCall.getInfo(profileIdx, ipType)":{"body":"dataCall.getInfo (${1:profileIdx}),(${2: ipType})","description":"获取数据拨号信息，包括连接状态、IP地址、DNS等。\r\n例子：\r\n| 参数       | 参数类型 | 参数说明                             |\r\n| ---------- | -------- | ------------------------------------ |\r\n| profileIdx | int      | PDP索引，取值1-8                     |\r\n| ipType     | int      | IP类型，0-IPV4，1-IPV6，2-IPV4和IPV6 |\r\n\r\n* 返回值\r\n\r\n错误返回整型-1，成功返回拨号信息，返回格式根据ipType的不同而有所区别：\r\nipType =0，返回值格式如下：\r\n\r\n`(profileIdx, ipType, [nwState, reconnect, ipv4Addr, priDns, secDns])`\r\n\r\nipType =1，返回值格式如下：\r\n\r\n`(profileIdx, ipType, [nwState, reconnect, ipv6Addr, priDns, secDns])`\r\n\r\nipType =2，返回值格式如下：\r\n\r\n`(profileIdx, ipType, [nwState, reconnect, ipv4Addr, priDns, secDns], [nwState, reconnect, ipv6Addr, priDns, secDns])`\r\n\r\n* 示例\r\n\r\n```\r\n>>> import dataCall\r\n>>> dataCall.getInfo(1, 0)\r\n(1, 0, [1, 0, '10.91.44.177', '58.242.2.2', '218.104.78.2'])\r\n\r\n```\r\n\r\n注：返回值 `(1, 0, [0, 0, '0.0.0.0', '0.0.0.0', '0.0.0.0'])` 表示当前没有拨号或者拨号没有成功。\r\n\r\n\r\n\r\n#### cellLocator - 基站定位\r\n\r\n模块功能：提供基站定位接口，获取坐标信息。\r\n\r\n","prefix":"dataCall.getInfo(profileIdx, ipType)"},"dataCall.setApn(profileIdx, ipType, apn, username, password, authType)":{"body":"dataCall.setApn (${1:profileIdx}),(${2: ipType}),(${3: apn}),(${4: username}),(${5: password}),(${6: authType})","description":"用户apn信息配置接口，用户调用该接口后，会在用户分区目录下创建user_apn.json文件，用于保存用户apn信息，并使用该apn信息启动拨号，进行数据链路激活。\r\n例子：\r\n| 参数       | 参数类型 | 参数说明                                                     |\r\n| ---------- | -------- | ------------------------------------------------------------ |\r\n| profileIdx | int      | PDP索引，取值1-8，一般设置为1，设置其他值可能需要专用apn与密码才能设置成功 |\r\n| ipType     | int      | IP类型，0-IPV4，1-IPV6，2-IPV4和IPV6                         |\r\n| apn        | string   | apn名称，可为空                                              |\r\n| username   | string   | apn用户名，可为空                                            |\r\n| password   | string   | apn密码，可为空                                              |\r\n| authType   | int      | 加密方式，0-不加密，1-PAP，2-CHAP，3-PAP或CHAP               |\r\n\r\n* 返回值\r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> import dataCall\r\n>>> dataCall.setApn(1, 0, \"3gnet.mnc001.mcc460.gprs\", \"\", \"\", 0)\r\n0\r\n```\r\n\r\n\r\n\r\n","prefix":"dataCall.setApn(profileIdx, ipType, apn, username, password, authType)"},"dataCall.setCallback(callback)":{"body":"dataCall.setCallback(${1:callback})","description":"注册用户回调函数，当网络状态发生变化，比如断线、上线时，会通过该回调函数通知用户。\r\n例子：\r\n| 参数     | 参数类型 | 参数说明                     |\r\n| -------- | -------- | ---------------------------- |\r\n| callback | function | 用户回调函数，函数形式见示例 |\r\n\r\n* 返回值\r\n\r\n注册失败返回整型-1，成功返回整型0。\r\n\r\n* 示例\r\n\r\n```python\r\n>>> import dataCall\r\n>>> import net\r\n\r\n>>> def nw_cb(args):\r\n\t\tpdp = args[0]\r\n\t\tnw_sta = args[1]\r\n\t\tif nw_sta == 1:\r\n\t\t\tprint(\"*** network %d connected! ***\" % pdp)\r\n\t\telse:\r\n\t\t\tprint(\"*** network %d not connected! ***\" % pdp)\r\n\t\t\t\r\n>>> dataCall.setCallback(nw_cb)\r\n0\r\n>>> net.setModemFun(4)  # 进入飞行模式\r\n0\r\n>>> *** network 1 not connected! *** # 进入飞行模式导致断网，通过回调告知用户\r\n>>> net.setModemFun(1)  # 退出飞行模式\r\n0\r\n>>> *** network 1 connected! *** # 退出飞行模式，自动拨号，等待联网成功，通过回调告知用户\r\n```\r\n\r\n\r\n\r\n","prefix":"dataCall.setCallback(callback)"},"dataCall.start(profileIdx, ipType, apn, username, password, authType)":{"body":"dataCall.start (${1:profileIdx}),(${2: ipType}),(${3: apn}),(${4: username}),(${5: password}),(${6: authType})","description":"启动拨号，进行数据链路激活。\r\n例子：\r\n| 参数       | 参数类型 | 参数说明                                                     |\r\n| ---------- | -------- | ------------------------------------------------------------ |\r\n| profileIdx | int      | PDP索引，取值1-8，一般设置为1，设置其他值可能需要专用apn与密码才能设置成功 |\r\n| ipType     | int      | IP类型，0-IPV4，1-IPV6，2-IPV4和IPV6                         |\r\n| apn        | string   | apn名称，可为空                                              |\r\n| username   | string   | apn用户名，可为空                                            |\r\n| password   | string   | apn密码，可为空                                              |\r\n| authType   | int      | 加密方式，0-不加密，1-PAP，2-CHAP，3-PAP或CHAP               |\r\n\r\n* 返回值\r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n* 示例 \r\n\r\n```\r\n>>> import dataCall\r\n>>> dataCall.start(1, 0, \"3gnet.mnc001.mcc460.gprs\", \"\", \"\", 0)\r\n0\r\n```\r\n\r\n\r\n\r\n","prefix":"dataCall.start(profileIdx, ipType, apn, username, password, authType)"},"dq = ucollections.deque(iterable, maxlen, flag)":{"body":"dq = ucollections.deque (${1:iterable}),(${2: maxlen}),(${3: flag})","description":"创建deque双向队列\r\n例子：\r\n| 参数     | 参数类型 | 参数说明                                                     |\r\n| -------- | -------- | ------------------------------------------------------------ |\r\n| iterable | tuple    | iterable必须是空元组                                         |\r\n| maxlen   | int      | 指定maxlen并将双端队列限制为此最大长度                       |\r\n| flag     | int      | 可选参数；0：不检查队列是否溢出，达到最大长度时继续append会丢弃之前的值  ，1：当队列达到最大设定长度会抛出IndexError: full |\r\n\r\n* 返回值\r\n\r\ndeque对象\r\n\r\n\r\n\r\n**deque对象方法**\r\n\r\n> ​\t**dq.append(data)**\r\n\r\n* 参数\r\n\r\n| 参数   | 参数类型     | 参数说明                                                     |\r\n| ------ | ------------ | ------------------------------------------------------------ |\r\n| data   | 基本数据类型 | iterable必须是空元组                                         |\r\n| maxlen | int          | 指定maxlen并将双端队列限制为此最大长度                       |\r\n| flag   | int          | 可选参数；0：不检查队列是否溢出  ，1：当队列达到最大设定长度会抛出IndexError: full |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n> ​\t**dq.popleft()**\r\n\r\n从deque的左侧移除并返回移除的数据。如果没有deque为空，会引起索引错误\r\n\r\n* 参数\r\n\r\n无\r\n\r\n* 返回值\r\n\r\n返回pop出的值\r\n\r\n\r\n\r\n**使用示例**\r\n\r\n```python\r\nfrom ucollections import deque\r\n\r\ndq = deque((),5)\r\ndq.append(1)\r\ndq.append([\"a\"])\r\ndq.append(\"a\")\r\n\r\ndq.popleft()  # 1\r\ndq.popleft()  # [\"a\"]\r\ndq.popleft()  # a\r\n```\r\n\r\n\r\n\r\n#### urandom - 生成随机数\r\n\r\nurandom 模块提供了生成随机数的工具。\r\n\r\n","prefix":"dq = ucollections.deque(iterable, maxlen, flag)"},"extint = machine.ExtInt(GPIOn, mode, pull, callback)":{"body":"extint = machine.ExtInt (${1:GPIOn}),(${2: mode}),(${3: pull}),(${4: callback})","description":"* 参数\r\n例子：\r\n| GPIOn    | int      | 引脚号<br />EC100YCN平台引脚对应关系如下：<br />GPIO1 – 引脚号22<br />GPIO2 – 引脚号23<br />GPIO3 – 引脚号178<br />GPIO4 – 引脚号199<br />GPIO5 – 引脚号204 |\r\n| mode     | int      | 设置触发方式<br />IRQ_RISING – 上升沿触发<br />IRQ_FALLING – 下降沿触发<br />IRQ_RISING_FALLING – 上升和下降沿触发 |\r\n| pull     | int      | PULL_DISABLE – 浮空模式<br />PULL_PU – 上拉模式<br />PULL_DOWN – 下拉模式 |\r\n| callback | function | 中断触发回调函数                                             |\r\n\r\n* 示例\r\n\r\n```\r\n>>> from machine import ExtInt\r\n>>> def fun(args):\r\n        print(“###interrupt  %d ###” %args)\r\n>>> extint = ExtInt(ExtInt.GPIO1, ExtInt.IRQ_FALLING, ExtInt.PULL_UP, fun)\r\n```\r\n\r\n\r\n\r\n","prefix":"extint = machine.ExtInt(GPIOn, mode, pull, callback)"},"extint.disable()":{"body":"extint.disable()","description":"禁用与extint对象关联的中断 。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n使能成功返回整型值0，使能失败返回整型值-1。\r\n\r\n\r\n\r\n","prefix":"extint.disable()"},"extint.enable()":{"body":"extint.enable()","description":"使能extint对象外部中断，当中断引脚收到上升沿或者下降沿信号时，会调用callback执行 。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n使能成功返回整型值0，使能失败返回整型值-1。\r\n\r\n\r\n\r\n","prefix":"extint.enable()"},"extint.line()":{"body":"extint.line()","description":"返回引脚映射的行号。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n引脚映射的行号。\r\n\r\n* 示例\r\n\r\n```\r\n>>> extint = ExtInt(ExtInt.GPIO1, ExtInt.IRQ_FALLING, ExtInt.PULL_PU, fun)\r\n>>> ext.line()\r\n32\r\n```\r\n\r\n\r\n\r\n##### RTC\r\n\r\n类功能：提供获取设置rtc时间方法。\r\n\r\n**创建RTC对象**\r\n\r\n","prefix":"extint.line()"},"fd = uio.open(name, mode=’r’, **kwarg)":{"body":"fd = uio.open (${1:name}),(${2: mode=’r’}),(${3: **kwarg})","description":"打开文件，内置`open()`函数是该函数的别名。\r\n例子：\r\n* `mode` ：打开模式\r\n\r\n  - r  只读模式打开文件\r\n- w  写入模式打开文件，每次写入会覆盖上次写入数据\r\n  - a  只写追加模式打开文件，可连续写入文件数据而不是覆盖数据\r\n\r\n  \r\n\r\n","prefix":"fd = uio.open(name, mode=’r’, **kwarg)"},"fd.close()":{"body":"fd.close()","description":"关闭打开的文件。\r\n例子：\r\n#### ustruct - 打包和解压原始数据类型\r\n\r\n该模块实现相应CPython模块的子集。更多信息请参阅阅CPython文档：[struct](https://docs.python.org/3.5/library/struct.html#module-struct)\r\n\r\n**字节顺序，大小和对齐方式**\r\n\r\n默认情况下，C类型以机器的本机格式和字节顺序表示，并在必要时通过跳过填充字节来正确对齐（根据C编译器使用的规则）。根据下表，格式字符串的第一个字符可用于指示打包数据的字节顺序，大小和对齐方式：\r\n\r\n| Character | Byte order             | Size     | Alignment |\r\n| --------- | ---------------------- | -------- | --------- |\r\n| `@`       | native                 | native   | native    |\r\n| `=`       | native                 | standard | none      |\r\n| `<`       | little-endian          | standard | none      |\r\n| `>`       | big-endian             | standard | none      |\r\n| `!`       | network (= big-endian) | standard | none      |\r\n\r\n**格式化字符表**\r\n\r\n| Format | C Type               | Python type       | Standard size |\r\n| ------ | -------------------- | ----------------- | ------------- |\r\n| `x`    | pad byte             | no value          |               |\r\n| `c`    | `char`               | bytes of length 1 | 1             |\r\n| `b`    | `signed char`        | integer           | 1             |\r\n| `B`    | `unsigned char`      | integer           | 1             |\r\n| `?`    | `_Bool`              | bool              | 1             |\r\n| `h`    | `short`              | integer           | 2             |\r\n| `H`    | `unsigned short`     | integer           | 2             |\r\n| `i`    | `int`                | integer           | 4             |\r\n| `I`    | `unsigned int`       | integer           | 4             |\r\n| `l`    | `long`               | integer           | 4             |\r\n| `L`    | `unsigned long`      | integer           | 4             |\r\n| `q`    | `long long`          | integer           | 8             |\r\n| `Q`    | `unsigned long long` | integer           | 8             |\r\n| `n`    | `ssize_t`            | integer           |               |\r\n| `N`    | `size_t`             | integer           |               |\r\n| `f`    | `float`              | float             | 4             |\r\n| `d`    | `double`             | float             | 8             |\r\n| `s`    | `char[]`             | bytes             |               |\r\n| `p`    | `char[]`             | bytes             |               |\r\n| `P`    | `void *`             | integer           |               |\r\n\r\n默认情况下，C类型以机器的本机格式和字节顺序表示，并在必要时通过跳过填充字节来正确对齐（根据C编译器使用的规则）\r\n\r\n","prefix":"fd.close()"},"fota_obj = fota()":{"prefix":"fota_obj = fota()"},"fota_obj.flush()":{"body":"fota_obj.flush()","description":"读取缓冲区写入的数据。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> fota_obj.flush()\r\n0\r\n```\r\n\r\n\r\n\r\n","prefix":"fota_obj.flush()"},"fota_obj.verify()":{"body":"fota_obj.verify()","description":"数据校验。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n检验成功返回整型值0，校验失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> fota_obj.verify()\r\n0\r\n```\r\n\r\n\r\n\r\n#### audio - 音频播放\r\n\r\n模块功能：音频播放，支持TTS、mp3以及AMR文件播放。\r\n\r\n##### TTS \r\n\r\n**创建TTS对象**\r\n\r\n","prefix":"fota_obj.verify()"},"fota_obj.write(bytesData)":{"body":"fota_obj.write(${1:bytesData})","description":"写入升级包数据流。\r\n例子：\r\n| 参数      | 参数类型 | 参数说明       |\r\n| --------- | -------- | -------------- |\r\n| bytesData | bytes    | 升级包文件数据 |\r\n\r\n* 返回值\r\n\r\n写入成功返回整型值0，写入失败返回值整型值-1。\r\n\r\n\r\n\r\n","prefix":"fota_obj.write(bytesData)"},"from machine import I2C":{"prefix":"from machine import I2C"},"from machine import RTC":{"prefix":"from machine import RTC"},"from misc import ADC":{"prefix":"from misc import ADC"},"from misc import PWM":{"prefix":"from misc import PWM"},"gc.collect()":{"body":"gc.collect()","description":"回收内存碎片。\r\n例子：\r\n","prefix":"gc.collect()"},"gc.disable()":{"body":"gc.disable()","description":"禁用自动回收机制。\r\n例子：\r\n","prefix":"gc.disable()"},"gc.enable()":{"body":"gc.enable()","description":"启用自动回收内存碎片机制。\r\n例子：\r\n","prefix":"gc.enable()"},"gc.mem_alloc()":{"body":"gc.mem_alloc()","description":"返回分配的堆RAM的字节数。此功能是MicroPython扩展。\r\n例子：\r\n","prefix":"gc.mem_alloc()"},"gc.mem_free()":{"body":"gc.mem_free()","description":"返回可用堆RAM的字节数，如果此数量未知，则返回-1。此功能是MicroPython扩展。\r\n例子：\r\n#### ubinascii - 二进制与ASCII转换\r\n\r\nubinascii 模块实现了二进制数据与各种ASCII编码之间的转换(双向)，该模块实现了CPython模块相应模块的子集。更多信息请参阅阅CPython文档：[binascii](https://docs.python.org/3.5/library/binascii.html#module-binascii)\r\n\r\n","prefix":"gc.mem_free()"},"gpio = Pin(GPIOn, direction, pullMode, level)":{"body":"gpio = Pin (${1:GPIOn}),(${2: direction}),(${3: pullMode}),(${4: level})","description":"* 参数\r\n例子：\r\n| GPIOn     | int  | 引脚号<br />EC100YCN平台引脚对应关系如下：<br />GPIO1 – 引脚号22<br />GPIO2 – 引脚号23<br />GPIO3 – 引脚号178<br />GPIO4 – 引脚号199<br />GPIO5 – 引脚号204 |\r\n| direction | int  | IN – 输入模式，OUT – 输出模式                                |\r\n| pullMode  | int  | PULL_DISABLE – 浮空模式<br />PULL_PU – 上拉模式<br />PULL_PD – 下拉模式 |\r\n| level     | int  | 0 - 设置引脚为低电平, 1- 设置引脚为高电平                    |\r\n\r\n* 示例\r\n\r\n```\r\nfrom machine import Pin\r\ngpio1 = Pin(Pin.GPIO1, Pin.OUT, Pin.PULL_DISABLE, 0)\r\n```\r\n\r\n\r\n\r\n","prefix":"gpio = Pin(GPIOn, direction, pullMode, level)"},"i2c_obj = I2C(I2Cn,  MODE)":{"body":"i2c_obj = I2C (${1:I2Cn}),(${2:  MODE})","description":"**参数说明**\r\n例子：\r\n| I2Cn | int  | i2c 通路索引号:<br />I2C.I2C0 : 0  （EC100Y）<br />I2C.I2C0 : 1  （EC600S） |\r\n| MODE | int  | i2c 的工作模式:<br />I2C.STANDARD_MODE : 0 标准模式<br />I2C.FAST_MODE ： 1 快速模式 |\r\n\r\n- 示例\r\n\r\n```python\r\nfrom machine import I2C\r\n\r\ni2c_obj = I2C(I2C.I2C0, I2C.STANDARD_MODE)  # 返回i2c对象\r\n```\r\n\r\n\r\n\r\n","prefix":"i2c_obj = I2C(I2Cn,  MODE)"},"import audio":{"prefix":"import audio"},"import fota":{"prefix":"import fota"},"lock.acquire()":{"body":"lock.acquire()","description":"获取锁，成功返回True，否则返回False。\r\n例子：\r\n","prefix":"lock.acquire()"},"lock.locked()":{"body":"lock.locked()","description":"返回锁的状态，True表示被某个线程获取，False则表示没有。\r\n例子：\r\n**_thread使用示例**\r\n\r\n```\r\nimport _thread\r\na = 0\r\nlock = _thread.allocate_lock()\r\ndef th_func(delay, id):\r\n\tglobal a\r\n\twhile True:\r\n\t\tlock.acquire()  # 获取锁\r\n\t\tif a >= 10:\r\n\t\t\tprint('thread %d exit' % id)\r\n\t\t\tlock.release() # 释放锁\r\n\t\t\tbreak\r\n\t\ta+=1\r\n\t\tprint('[thread %d] a is %d' % (id, a))\r\n\t\tlock.release()\r\nfor i in range(2):\r\n    _thread.start_new_thread(th_func, (i + 1, i))\r\n\r\n```\r\n\r\n\r\n\r\n#### uhashlib - 哈希算法\r\n\r\n模块功能: 实现二进制数据散列算法,目前支持sha256，sha1，MD5。\r\n\r\n> ​\t**hash_obj = uhashlib.sha256(bytes)**\r\n\r\n创建一个SHA256哈希对象\r\n\r\n* 参数 \r\n\r\n| 参数  | 参数类型 | 参数说明                                              |\r\n| ----- | -------- | ----------------------------------------------------- |\r\n| bytes | bytes    | 可选参数，可在创建时传入bytes数据，也可通过update方法 |\r\n\r\n* 返回值\r\n\r\nSHA256哈希对象\r\n\r\n\r\n\r\n> ​\t**hash_obj  = uhashlib.sha1(bytes)**\r\n\r\n创建一个SHA1哈希对象\r\n\r\n* 参数 \r\n\r\n| 参数  | 参数类型 | 参数说明                                              |\r\n| ----- | -------- | ----------------------------------------------------- |\r\n| bytes | bytes    | 可选参数，可在创建时传入bytes数据，也可通过update方法 |\r\n\r\n* 返回值\r\n\r\nSHA1哈希对象\r\n\r\n\r\n\r\n> ​\t**hash_obj  = uhashlib.md5(bytes)**\r\n\r\n创建一个MD5哈希对象\r\n\r\n* 参数 \r\n\r\n| 参数  | 参数类型 | 参数说明                                              |\r\n| ----- | -------- | ----------------------------------------------------- |\r\n| bytes | bytes    | 可选参数，可在创建时传入bytes数据，也可通过update方法 |\r\n\r\n* 返回值\r\n\r\nMD5哈希对象\r\n\r\n\r\n\r\n**哈希对象方法**\r\n\r\n> ​\t**hash_obj .update(bytes)**\r\n\r\n将更多的bytes数据加到散列\r\n\r\n* 参数 \r\n\r\n| 参数  | 参数类型 | 参数说明         |\r\n| ----- | -------- | ---------------- |\r\n| bytes | bytes    | 需要被加密的数据 |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n\r\n\r\n> ​\t**hash_obj .digest()**\r\n\r\n返回通过哈希传递的所有数据的散列，数据为字节类型。调用此方法后，无法再将更多的数据送入散列。\r\n\r\n* 参数 \r\n\r\n无\r\n\r\n* 返回值\r\n\r\n返回加密后字节类型的数据\r\n\r\n\r\n\r\n**使用实例**\r\n\r\n```python\r\nimport uhashlib\r\nimport ubinascii\r\n\r\nhash_obj  = uhashlib.sha256()  # 创建hash对象\r\nhash_obj.update(b\"QuecPython\")\r\nres = hash_obj.digest()\r\n# b\"\\x1e\\xc6gq\\xb3\\xa9\\xac>\\xa4\\xc4O\\x00\\x9eTW\\x97\\xd4.\\x9e}Bo\\xff\\x82u\\x89Th\\xfe'\\xc6\\xcd\"\r\n# 转成十六进制表示\r\nhex_msg = ubinascii.hexlify(res)\r\n# b'1ec66771b3a9ac3ea4c44f009e545797d42e9e7d426fff8275895468fe27c6cd'\r\n```\r\n\r\n\r\n\r\n### QuecPython类库\r\n\r\n#### example - 执行python脚本\r\n\r\n模块功能：提供方法让用户可以在命令行或者代码中执行python脚本。\r\n\r\n> example.exec('filename')\r\n\r\n执行指定的python脚本文件。\r\n\r\n* 参数 \r\n\r\n| 参数     | 参数类型 | 参数说明                 |\r\n| -------- | -------- | ------------------------ |\r\n| filename | string   | 要执行python脚本的文件名 |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n* 示例\r\n\r\n```python\r\n# 假设有文件test.py,内容如下\r\n\r\ndef myprint():\r\n    count = 10\r\n    while count > 0:\r\n        count -= 1\r\n        print('##### test #####')\r\n\r\nmyprint()\r\n\r\n#将test.py文件上传到模块中，进入命令行执行如下代码\r\n>>> uos.listdir()\r\n['apn_cfg.json', 'test.py']\r\n>>> import example\r\n>>> example.exec('test.py')\r\n# 执行结果如下\r\n\r\n##### test #####\r\n##### test #####\r\n##### test #####\r\n##### test #####\r\n##### test #####\r\n##### test #####\r\n##### test #####\r\n##### test #####\r\n##### test #####\r\n##### test #####\r\n```\r\n\r\n\r\n\r\n#### dataCall - 数据拨号\r\n\r\n模块功能：提供数据拨号相关接口。\r\n\r\n","prefix":"lock.locked()"},"lock.release()":{"body":"lock.release()","description":"释放锁。\r\n例子：\r\n","prefix":"lock.release()"},"log.basicConfig(level)":{"body":"log.basicConfig(${1:level})","description":"设置日记输出级别,  设置日志输出级别, 默认为log.INFO，系统只会输出 level 数值大于或等于该 level 的的日志结果。\r\n例子：\r\n| 参数     | 参数类型 | 说明                  |\r\n| -------- | -------- | --------------------- |\r\n| CRITICAL | 常量     | 日志记录级别的数值 50 |\r\n| ERROR    | 常量     | 日志记录级别的数值 40 |\r\n| WARNING  | 常量     | 日志记录级别的数值 30 |\r\n| INFO     | 常量     | 日志记录级别的数值 20 |\r\n| DEBUG    | 常量     | 日志记录级别的数值 10 |\r\n| NOTSET   | 常量     | 日志记录级别的数值 0  |\r\n\r\n* 示例\r\n\r\n```python\r\nimport log\r\nlog.basicConfig(level=log.INFO)\r\n```\r\n\r\n\r\n\r\n","prefix":"log.basicConfig(level)"},"log.critical(tag,msg)":{"body":"log.critical (${1:tag}),(${2:msg})","description":"输出critical级别的日志。\r\n例子：\r\n| 参数 | 参数类型 | 说明                         |\r\n| ---- | -------- | ---------------------------- |\r\n| tag  | string   | 模块或功能名称，作为日志前缀 |\r\n| msg  | string   | 可变参数，日志内容           |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n* 示例\r\n\r\n```python\r\nimport log\r\nTestlog = log.getLogger (“TestLog”)\r\nTestlog.critical(\"Test message: %d(%s)\", 100, \"foobar\")\r\n```\r\n\r\n\r\n\r\n**log使用示例**\r\n\r\n```python\r\nimport log\r\n\r\nlog.basicConfig(level=log.INFO)   # 设置日志输出级别\r\n\r\n# 获取logger对象，如果不指定name则返回root对象，多次使用相同的name调用getLogger方法返回同一个logger对象\r\nlog_obj = log.getLogger(\"test\")  \r\n\r\nlog_obj.debug(\"Test message: %d(%s)\", 100, \"foobar\")\r\nlog_obj.info(\"Test message2: %d(%s)\", 100, \"foobar\")\r\nlog_obj.warning(\"Test message3: %d(%s)\")\r\nlog_obj.error(\"Test message4\")\r\nlog_obj.critical(\"Test message5\")\r\n```\r\n\r\n\r\n\r\n#### umqtt - MQTT\r\n\r\n模块功能:提供创建MQTT客户端发布订阅功能。\r\n\r\n```\r\nQoS级别说明\r\n在MQTT协议中，定义了三个级别的QoS，分别是：\r\nQoS0 – 最多一次，是最低级别；发送者发送完消息之后，并不关心消息是否已经到达接收方；\r\nQoS1 – 至少一次，是中间级别；发送者保证消息至少送达到接收方一次；\r\nQoS2 – 有且仅有一次，是最高级别；保证消息送达且仅送达一次。\r\n```\r\n\r\n\r\n\r\n","prefix":"log.critical(tag,msg)"},"log.debug(tag, msg)":{"body":"log.debug (${1:tag}),(${2: msg})","description":"输出debug级别的日志。\r\n例子：\r\n| 参数 | 参数类型 | 说明                         |\r\n| ---- | -------- | ---------------------------- |\r\n| tag  | string   | 模块或功能名称，作为日志前缀 |\r\n| msg  | string   | 可变参数，日志内容           |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n* 示例 \r\n\r\n```python\r\nimport log\r\nTestlog = log.getLogger (“TestLog”)\r\nTestlog.debug(\"Test message: %d(%s)\", 100, \"foobar\")\r\n```\r\n\r\n\r\n\r\n","prefix":"log.debug(tag, msg)"},"log.error(tag,msg)":{"body":"log.error (${1:tag}),(${2:msg})","description":"输出error级别的日志。\r\n例子：\r\n| 参数 | 参数类型 | 说明                         |\r\n| ---- | -------- | ---------------------------- |\r\n| tag  | string   | 模块或功能名称，作为日志前缀 |\r\n| msg  | string   | 可变参数，日志内容           |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n* 示例\r\n\r\n```python\r\nimport log\r\nTestlog = log.getLogger (“TestLog”)\r\nTestlog.error(\"Test message: %d(%s)\", 100, \"foobar\")\r\n```\r\n\r\n\r\n\r\n","prefix":"log.error(tag,msg)"},"log.getLogger(name)":{"body":"log.getLogger(${1:name})","description":"获取logger对象，如果不指定name则返回root对象，多次使用相同的name调用getLogger方法返回同一个logger对象。\r\n例子：\r\n| 参数 | 参数类型 | 说明     |\r\n| ---- | -------- | -------- |\r\n| name | string   | 日志主题 |\r\n\r\n* 返回值\r\n\r\nlog对象。\r\n\r\n* 示例\r\n\r\n```python\r\nimport log\r\nTestlog = log.getLogger (“TestLog”)\r\n```\r\n\r\n\r\n\r\n","prefix":"log.getLogger(name)"},"log.info(tag,msg)":{"body":"log.info (${1:tag}),(${2:msg})","description":"输出info级别的日志。\r\n例子：\r\n| 参数 | 参数类型 | 说明                         |\r\n| ---- | -------- | ---------------------------- |\r\n| tag  | string   | 模块或功能名称，作为日志前缀 |\r\n| msg  | string   | 可变参数，日志内容           |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n* 示例\r\n\r\n```python\r\nimport log\r\nTestlog = log.getLogger (“TestLog”)\r\nTestlog.info(\"Test message: %d(%s)\", 100, \"foobar\")\r\n```\r\n\r\n\r\n\r\n","prefix":"log.info(tag,msg)"},"log.warning(tag,msg)":{"body":"log.warning (${1:tag}),(${2:msg})","description":"输出warning级别的日志。\r\n例子：\r\n| 参数 | 参数类型 | 说明                         |\r\n| ---- | -------- | ---------------------------- |\r\n| tag  | string   | 模块或功能名称，作为日志前缀 |\r\n| msg  | string   | 可变参数，日志内容           |\r\n\r\n* 返回值\r\n\r\n无\r\n\r\n* 示例\r\n\r\n```python\r\nimport log\r\nTestlog = log.getLogger (“TestLog”)\r\nTestlog.warning(\"Test message: %d(%s)\", 100, \"foobar\")\r\n```\r\n\r\n\r\n\r\n","prefix":"log.warning(tag,msg)"},"math.acos(x)":{"body":"math.acos(${1:x})","description":"返回x的反余弦弧度值，返回值为浮点数。x是-1~1之间的数，包括-1和1，如果小于-1或者大于1，会产生错误。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.acos(0.6)\r\n0.9272952\r\n```\r\n\r\n\r\n\r\n","prefix":"math.acos(x)"},"math.asin(x)":{"body":"math.asin(${1:x})","description":"返回x的反正弦弧度值，返回值为浮点数。x是-1~1之间的数，包括-1和1，如果小于-1或者大于1，会产生错误。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.asin(-1)\r\n-1.570796\r\n```\r\n\r\n\r\n\r\n","prefix":"math.asin(x)"},"math.atan(x)":{"body":"math.atan(${1:x})","description":"返回x的反正切弧度值，返回值为浮点数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.atan(-8)\r\n-1.446441\r\n>>> math.atan(6.4)\r\n1.4158\r\n```\r\n\r\n\r\n\r\n","prefix":"math.atan(x)"},"math.atan2(x, y)":{"body":"math.atan2 (${1:x}),(${2: y})","description":"返回给定的 X 及 Y 坐标值的反正切值，返回值为浮点数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.atan2(-0.50,0.48)\r\n-0.8058035\r\n>>> math.atan2(7, 9)\r\n0.6610432\r\n```\r\n\r\n\r\n\r\n","prefix":"math.atan2(x, y)"},"math.ceil(x)":{"body":"math.ceil(${1:x})","description":"返回数字的上入整数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.ceil(4.1)\r\n5\r\n```\r\n\r\n\r\n\r\n","prefix":"math.ceil(x)"},"math.copysign(x, y)":{"body":"math.copysign (${1:x}),(${2: y})","description":"把y的正负号加到x前面，可以使用0，返回值为浮点数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.copysign(5, 0)\r\n5.0\r\n>>> math.copysign(5, -4)\r\n-5.0\r\n>>> math.copysign(5, 9)\r\n5.0\r\n```\r\n\r\n\r\n\r\n","prefix":"math.copysign(x, y)"},"math.cos(x)":{"body":"math.cos(${1:x})","description":"返回x的弧度的余弦值，范围再-1~1之间，返回值为浮点数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.cos(3)\r\n-0.9899925\r\n```\r\n\r\n\r\n\r\n","prefix":"math.cos(x)"},"math.degrees(x)":{"body":"math.degrees(${1:x})","description":"将弧度转换为角度，返回值为浮点数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.degrees(5)\r\n286.4789\r\n>>> math.degrees(math.pi/2)\r\n90.0\r\n```\r\n\r\n\r\n\r\n","prefix":"math.degrees(x)"},"math.e":{"body":"math.e","description":"数学常量 `e`，`e`即自然常数。\r\n例子：\r\n","prefix":"math.e"},"math.exp(x)":{"body":"math.exp(${1:x})","description":"返回e的x次幂，返回值为浮点数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.exp(1)\r\n2.718282\r\n>>> print(math.e)\r\n2.718282\r\n```\r\n\r\n\r\n\r\n","prefix":"math.exp(x)"},"math.fabs(x)":{"body":"math.fabs(${1:x})","description":"返回数字的绝对值，返回值为浮点数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.fabs(-3.88)\r\n3.88\r\n```\r\n\r\n\r\n\r\n","prefix":"math.fabs(x)"},"math.floor(x)":{"body":"math.floor(${1:x})","description":"返回数字的下舍整数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.floor(8.7)\r\n8\r\n>>> math.floor(9)\r\n9\r\n>>> math.floor(-7.6)\r\n-8\r\n```\r\n\r\n\r\n\r\n","prefix":"math.floor(x)"},"math.fmod(x, y)":{"body":"math.fmod (${1:x}),(${2: y})","description":"返回x/y的余数，返回值为浮点数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.fmod(15, 4)\r\n3.0\r\n>>> math.fmod(15, 3)\r\n0.0\r\n```\r\n\r\n\r\n\r\n","prefix":"math.fmod(x, y)"},"math.frexp(x)":{"body":"math.frexp(${1:x})","description":"返回一个元组(m,e),其计算方式为：x分别除0.5和1,得到一个值的范围，2e的值在这个范围内，e取符合要求的最大整数值,然后x/(2e)，得到m的值。如果x等于0，则m和e的值都为0，m的绝对值的范围为(0.5,1)之间，不包括0.5和1。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.frexp(52)\r\n(0.8125, 6)\r\n```\r\n\r\n","prefix":"math.frexp(x)"},"math.isfinite(x)":{"body":"math.isfinite(${1:x})","description":"判断 x 是否为有限数，是则返回True，否则返回False。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.isfinite(8)\r\nTrue\r\n```\r\n\r\n\r\n\r\n","prefix":"math.isfinite(x)"},"math.isinf(x)":{"body":"math.isinf(${1:x})","description":"如果x是正无穷大或负无穷大，则返回True,否则返回False。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.isinf(123)\r\nFalse\r\n```\r\n\r\n\r\n\r\n","prefix":"math.isinf(x)"},"math.isnan(x)":{"body":"math.isnan(${1:x})","description":"如果x不是数字True,否则返回False。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.isnan(23)\r\nFalse\r\n```\r\n\r\n\r\n\r\n","prefix":"math.isnan(x)"},"math.ldexp(x, exp)":{"body":"math.ldexp (${1:x}),(${2: exp})","description":"返回x*(2**i)的值。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.ldexp(2, 1)\r\n4.0\r\n```\r\n\r\n\r\n\r\n","prefix":"math.ldexp(x, exp)"},"math.log(x)":{"body":"math.log(${1:x})","description":"返回x的自然对数，x > 0，小于0会报错。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.log(2)\r\n0.6931472\r\n```\r\n\r\n\r\n\r\n","prefix":"math.log(x)"},"math.modf(x)":{"body":"math.modf(${1:x})","description":"返回由x的小数部分和整数部分组成的元组。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.modf(17.592)\r\n(0.5919991, 17.0)\r\n```\r\n\r\n\r\n\r\n","prefix":"math.modf(x)"},"math.pi":{"body":"math.pi","description":"数学常量 pi（圆周率，一般以π来表示）。\r\n例子：\r\n","prefix":"math.pi"},"math.pow(x, y)":{"body":"math.pow (${1:x}),(${2: y})","description":"返回x的y次方，返回值是浮点数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.pow(2, 3)\r\n8.0\r\n```\r\n\r\n\r\n\r\n","prefix":"math.pow(x, y)"},"math.radians(x)":{"body":"math.radians(${1:x})","description":"将角度转换为弧度，返回值为浮点数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.radians(90)\r\n1.570796\r\n```\r\n\r\n\r\n\r\n","prefix":"math.radians(x)"},"math.sin(x)":{"body":"math.sin(${1:x})","description":"返回x弧度的正弦值，数值在 -1 到 1 之间。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.sin(-18)\r\n0.7509873\r\n>>> math.sin(50)\r\n-0.2623749\r\n```\r\n\r\n\r\n\r\n","prefix":"math.sin(x)"},"math.sqrt(x)":{"body":"math.sqrt(${1:x})","description":"返回数字x的平方根，返回值为浮点数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.sqrt(4)\r\n2.0\r\n>>> math.sqrt(7)\r\n2.645751\r\n```\r\n\r\n\r\n\r\n","prefix":"math.sqrt(x)"},"math.tan(x)":{"body":"math.tan(${1:x})","description":"返回 x 弧度的正切值，数值在 -1 到 1 之间，为浮点数。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.tan(9)\r\n-0.4523157\r\n```\r\n\r\n\r\n\r\n","prefix":"math.tan(x)"},"math.trunc(x)":{"body":"math.trunc(${1:x})","description":"返回x的整数部分。\r\n例子：\r\n```\r\n>>> import math\r\n>>> math.trunc(7.123)\r\n7\r\n```\r\n\r\n\r\n\r\n#### usocket - socket模块\r\n\r\nusocket 模块提供对BSD套接字接口的访问。该模块实现相应CPython模块的子集。更多信息请参阅阅CPython文档：[socket](https://docs.python.org/3.5/library/socket.html#module-socket)\r\n\r\n","prefix":"math.trunc(x)"},"modem.getDevFwVersion()":{"body":"modem.getDevFwVersion()","description":"获取设备固件版本号。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回string类型固件版本号，失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> modem.getDevFwVersion()\r\n'EC100YCNAAR01A01M16_OCPU_PY'\r\n```\r\n\r\n\r\n\r\n","prefix":"modem.getDevFwVersion()"},"modem.getDevImei()":{"body":"modem.getDevImei()","description":"获取设备的IMEI。\r\n例子：\r\n无\r\n\r\n返回值\r\n\r\n成功返回string类型设备的IMEI，失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> import modem\r\n>>> modem.getDevImei()\r\n'866327040830317'\r\n```\r\n\r\n\r\n\r\n","prefix":"modem.getDevImei()"},"modem.getDevModel()":{"body":"modem.getDevModel()","description":"获取设备型号。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回string类型设备型号，失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> modem.getDevModel()\r\n'EC100Y'\r\n```\r\n\r\n\r\n\r\n","prefix":"modem.getDevModel()"},"modem.getDevProductId()":{"body":"modem.getDevProductId()","description":"获取设备的制造商ID。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回设备制造商ID，失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> modem.getDevProductId()\r\n'Quectel'\r\n```\r\n\r\n\r\n\r\n#### machine - 硬件相关功能\r\n\r\n模块功能:  包含与特定电路板上的硬件相关的特定功能。该模块中的大多数功能允许直接和不受限制地访问和控制系统上的硬件。\r\n\r\n##### Pin\r\n\r\n类功能：GPIO读写操作。\r\n\r\n**常量说明**\r\n\r\n| 常量             | 说明     |\r\n| ---------------- | -------- |\r\n| Pin.GPIO1        | GPIO1    |\r\n| Pin.GPIO2        | GPIO2    |\r\n| Pin.GPIO3        | GPIO3    |\r\n| Pin.GPIO4        | GPIO4    |\r\n| Pin.GPIO5        | GPIO5    |\r\n| Pin.IN           | 输入模式 |\r\n| Pin.OUT          | 输出模式 |\r\n| Pin.PULL_DISABLE | 浮空模式 |\r\n| Pin.PULL_PU      | 上拉模式 |\r\n| Pin.PULL_PD      | 下拉模式 |\r\n\r\n\r\n\r\n**创建gpio对象**\r\n\r\n","prefix":"modem.getDevProductId()"},"modem.getDevSN()":{"body":"modem.getDevSN()","description":"获取设备序列号。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回string类型设备序列号，失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> modem.getDevSN()\r\n'D1Q20GM050038341P'\r\n```\r\n\r\n\r\n\r\n","prefix":"modem.getDevSN()"},"mytuple = ucollections.namedtuple(name, fields)":{"body":"mytuple = ucollections.namedtuple (${1:name}),(${2: fields})","description":"创建一个具有特定名称和一组字段的新namedtuple容器类型，namedtuple是元组的子类，允许通过索引来访问它的字段。\r\n例子：\r\n```\r\n>>> import ucollections\r\n>>> mytuple = ucollections.namedtuple(\"mytuple\", (\"id\", \"name\"))\r\n>>> t1 = mytuple(1, \"foo\")\r\n>>> t2 = mytuple(2, \"bar\")\r\n>>> print(t1.name)\r\nfoo\r\n```\r\n\r\n\r\n\r\n","prefix":"mytuple = ucollections.namedtuple(name, fields)"},"net.csqQueryPoll()":{"body":"net.csqQueryPoll()","description":"获取csq信号强度。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回整型的csq信号强度值，失败返回整型值-1，返回值为99表示异常；\r\n\r\n信号强度值范围0~31，值越大表示信号强度越好。\r\n\r\n* 示例\r\n\r\n```\r\n>>> import net\r\n>>> net.csqQueryPoll()\r\n31\r\n```\r\n\r\n\r\n\r\n","prefix":"net.csqQueryPoll()"},"net.getCellInfo()":{"body":"net.getCellInfo()","description":"获取邻近 CELL 的信息。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n失败返回整型值-1，成功返回包含三种网络系统（GSM、UMTS、LTE）的信息的list，如果对应网络系统信息为空，则返回空的List。返回值格式如下：\r\n\r\n`([(flag, cid, mcc, mnc, lac, arfcn, bsic, rssi)], [(flag, cid, licd, mcc, mnc, lac, arfcn, bsic, rssi)], [(flag, cid, mcc, mnc, pci, tac, earfcn, rssi)])`\r\n\r\nGSM网络系统返回值说明\r\n\r\n| 参数  | 参数意义                                    |\r\n| ----- | ------------------------------------------- |\r\n| flag  | 返回 0 - 2， 0：present，1：inter，2：intra |\r\n| cid   | 返回cid信息，0则为空                        |\r\n| mcc   | 移动设备国家代码                            |\r\n| mnc   | 移动设备网络代码                            |\r\n| lac   | 位置区码                                    |\r\n| arfcn | 无线频道编号                                |\r\n| bsic  | 基站识别码                                  |\r\n| rssi  | 接收的信号强度                              |\r\n\r\nUMTS网络系统返回值说明\r\n\r\n| 参数  | 参数意义                                    |\r\n| ----- | ------------------------------------------- |\r\n| flag  | 返回 0 - 2， 0：present，1：inter，2：intra |\r\n| cid   | 返回cid信息，0则为空                        |\r\n| licd  | 区域标识号                                  |\r\n| mcc   | 移动设备国家代码                            |\r\n| mnc   | 移动设备网络代码                            |\r\n| lac   | 位置区码                                    |\r\n| arfcn | 无线频道编号                                |\r\n| bsic  | 基站识别码                                  |\r\n| rssi  | 接收的信号强度                              |\r\n\r\nLTE网络系统返回值说明\r\n\r\n| 参数   | 参数意义                                    |\r\n| ------ | ------------------------------------------- |\r\n| flag   | 返回 0 - 2， 0：present，1：inter，2：intra |\r\n| cid    | 返回cid信息，0则为空                        |\r\n| mcc    | 移动设备国家代码                            |\r\n| mnc    | 移动设备网络代码                            |\r\n| pci    | 小区标识                                    |\r\n| tac    | Tracing area code                           |\r\n| earfcn | 无线频道编号 范围: 0 - 65535                |\r\n| rssi   | 接收的信号强度                              |\r\n\r\n* 示例\r\n\r\n```\r\n>>> net.getCellInfo()\r\n([], [], [(0, 14071232, 1120, 0, 21771, 123, 1300)])\r\n```\r\n\r\n\r\n\r\n","prefix":"net.getCellInfo()"},"net.getCi()":{"body":"net.getCi()","description":"获取附近小区ID。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回一个list类型的数组，包含小区id，格式为：`[id, ……, id]`\r\n\r\n失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> net.getCi()\r\n[14071232, 0]\r\n```\r\n\r\n\r\n\r\n","prefix":"net.getCi()"},"net.getConfig()":{"body":"net.getConfig()","description":"获取当前网络模式、漫游配置。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n失败返回整型值-1，成功返回一个元组，包含当前首选的网络制式与漫游打开状态。\r\n\r\n网络制式\r\n\r\n| 值   | 网络制式                                                     |\r\n| ---- | ------------------------------------------------------------ |\r\n| 0    | GSM                                                          |\r\n| 1    | UMTS . not supported in EC100Y                               |\r\n| 2    | GSM_UMTS, auto. not supported in EC100Y and EC200S           |\r\n| 3    | GSM_UMTS, GSM preferred. not supported in EC100Y and EC200S  |\r\n| 4    | SM_UMTS, UMTS preferred. not supported in EC100Y and EC200S  |\r\n| 5    | LTE                                                          |\r\n| 6    | GSM_LTE, auto, single link                                   |\r\n| 7    | GSM_LTE, GSM preferred, single link                          |\r\n| 8    | GSM_LTE, LTE preferred, single link                          |\r\n| 9    | UMTS_LTE, auto, single link. not supported in EC100Y and EC200S |\r\n| 10   | UMTS_LTE, UMTS preferred, single link. not supported in EC100Y and EC200S |\r\n| 11   | UMTS_LTE, LTE preferred, single link . not supported in EC100Y and EC200S |\r\n| 12   | GSM_UMTS_LTE, auto, single link. not supported in EC100Y and EC200S |\r\n| 13   | GSM_UMTS_LTE, GSM preferred, single link. not supported in EC100Y and EC200S |\r\n| 14   | GSM_UMTS_LTE, UMTS preferred, single link. not supported in EC100Y and EC200S |\r\n| 15   | GSM_UMTS_LTE, LTE preferred, single link. not supported in EC100Y and EC200S |\r\n| 16   | GSM_LTE, dual link                                           |\r\n| 17   | UMTS_LTE, dual link. not supported in EC100Y and EC200S      |\r\n| 18   | GSM_UMTS_LTE, dual link. not supported in EC100Y and EC200S  |\r\n\r\n* 示例\r\n\r\n```\r\n>>>net.getConfig ()\r\n(8, False)\r\n```\r\n\r\n\r\n\r\n","prefix":"net.getConfig()"},"net.getLac()":{"body":"net.getLac()","description":"获取附近小区的Lac。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回一个list类型的数组，包含小区lac，格式为：`[lac, ……, lac]`\r\n\r\n失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> net.getLac()\r\n[21771, 0]\r\n```\r\n\r\n\r\n\r\n","prefix":"net.getLac()"},"net.getMcc()":{"body":"net.getMcc()","description":"获取附近小区的mcc。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回一个list类型的数组，包含小区mcc，格式为：`[mcc, ……, mcc]`\r\n\r\n失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> net.getMcc()\r\n[1120, 0]\r\n```\r\n\r\n\r\n\r\n","prefix":"net.getMcc()"},"net.getMnc()":{"body":"net.getMnc()","description":"获取附近小区的mnc。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回一个list类型的数组，包含小区mnc，格式为：`[mnc, ……, mnc]`\r\n\r\n失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> net.getMnc()\r\n[0, 0]\r\n```\r\n\r\n\r\n\r\n","prefix":"net.getMnc()"},"net.getModemFun()":{"body":"net.getModemFun()","description":"获取当前SIM模式。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回当前SIM模式：\r\n\r\n0 ：全功能关闭\r\n\r\n1 ：全功能开启（默认）\r\n\r\n4 ：飞行模式\r\n\r\n失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> net.getModemFun()\r\n1\r\n```\r\n\r\n\r\n\r\n","prefix":"net.getModemFun()"},"net.getNetMode()":{"body":"net.getNetMode()","description":"获取网络配置模式。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n失败返回整型值-1，成功返回一个元组，格式为：`(selection_mode, mcc, mnc, act)`\r\n\r\n返回值参数说明：\r\n`selection_mode` ：方式，0 - 自动，1 - 手动\r\n`mcc` ：移动设备国家代码\r\n`mnc` ：移动设备网络代码\r\n`act` ：首选网络的ACT模式\r\n\r\nACT模式\r\n\r\n| 值   | ACT模式            |\r\n| ---- | ------------------ |\r\n| 0    | GSM                |\r\n| 1    | COMPACT            |\r\n| 2    | UTRAN              |\r\n| 3    | GSM wEGPRS         |\r\n| 4    | UTRAN wHSDPA       |\r\n| 5    | UTRAN wHSUPA       |\r\n| 6    | UTRAN wHSDPA HSUPA |\r\n| 7    | E UTRAN            |\r\n| 8    | UTRAN HSPAP        |\r\n| 9    | E TRAN A           |\r\n| 10   | NONE               |\r\n\r\n* 示例\r\n\r\n```\r\n>>> net.getNetMode()\r\n(0, '460', '46', 7)\r\n```\r\n\r\n\r\n\r\n","prefix":"net.getNetMode()"},"net.getSignal()":{"body":"net.getSignal()","description":"获取详细信号强度。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n失败返回整型值-1，成功返回一个元组，包含两个List(GW 、LTE)，返回值格式如下：\r\n\r\n`([rssi, bitErrorRate, rscp, ecno], [rssi, rsrp, rsrq, cqi])`\r\n\r\n返回值参数说明：\r\n\r\nGW list：\r\n\r\n`rssi` ：接收的信号强度\r\n\r\n`bitErrorRate` ：误码率\r\n\r\n`rscp` ：接收信号码功率\r\n\r\n`ecno` ：导频信道\r\n\r\nLTE list：\r\n\r\n`rssi` ：接收的信号强度\r\n\r\n`rsrp` ：下行参考信号的接收功率\r\n\r\n`rsrq` ：下行特定小区参考信号的接收质量\r\n\r\n`cqi` ：信道质量\r\n\r\n* 示例\r\n\r\n```\r\n>>>net.getSignal()\r\n([99, 99, 255, 255], [-51, -76, -5, 255])\r\n```\r\n\r\n\r\n\r\n","prefix":"net.getSignal()"},"net.getState()":{"body":"net.getState()","description":"获取当前网络注册信息。\r\n例子：\r\n`([voice_state, voice_lac, voice_cid, voice_rat, voice_reject_cause, voice_psc], [data_state, data _lac, data _cid, data _rat, data _reject_cause, data _psc])`\r\n\r\n返回值参数说明：\r\n\r\n`state` ：网络注册状态\r\n\r\n`lac` ：位置区码\r\n\r\n`cid` ：int类型id信息\r\n\r\n`act` ：注网制式\r\n\r\n`reject_cause` ：注册被拒绝的原因\r\n\r\n`psc` ：Primary Scrambling Code\r\n\r\n网络注册状态\r\n\r\n| 值   | 状态说明                                                     |\r\n| ---- | ------------------------------------------------------------ |\r\n| 0    | not registered, MT is not currently searching an operator to register to |\r\n| 1    | registered, home network                                     |\r\n| 2    | not registered, but MT is currently trying to attach or searching an operator to register to |\r\n| 3    | registration denied                                          |\r\n| 4    | unknown                                                      |\r\n| 5    | registered, roaming                                          |\r\n| 6    | egistered for “SMS only”, home network (not applicable)      |\r\n| 7    | registered for “SMS only”, roaming (not applicable)          |\r\n| 8    | attached for emergency bearer services only                  |\r\n| 9    | registered for “CSFB not preferred”, home network (not applicable) |\r\n| 10   | registered for “CSFB not preferred”, roaming (not applicable) |\r\n| 11   | emergency bearer services only                               |\r\n\r\n* 示例\r\n\r\n```\r\n>>> getState()\r\n([11, 26909, 232301323, 7, 0, 466], [0, 26909, 232301323, 7, 0, 0])\r\n```\r\n\r\n\r\n\r\n","prefix":"net.getState()"},"net.nitzTime()":{"body":"net.nitzTime()","description":"获取当前基站时间。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n失败返回整型值-1，成功返回一个元组，包含基站时间与对应时间戳与闰秒数（0表示不可用），格式为：\r\n\r\n`(date, abs_time, leap_sec)`\r\n\r\n`date` ：基站时间，string类型\r\n\r\n`abs_time` ：基站时间的绝对秒数表示，整型\r\n\r\n`leap_sec` ：闰秒数，整型\r\n\r\n* 示例\r\n\r\n```\r\n>>> net.nitzTime()\r\n('20/07/22 05:14:04', 1595394844, 0)\r\n```\r\n\r\n\r\n\r\n","prefix":"net.nitzTime()"},"net.operatorName()":{"body":"net.operatorName()","description":"获取当前注网的运营商信息。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n失败返回整型值-1，成功返回一个元组，包含注网的运营商信息，格式为：\r\n\r\n`(long_eons, short_eons, mcc, mnc)`\r\n\r\n`long_eons` ：运营商信息全称，string类型\r\n\r\n`short_eons` ：运营商信息简称，string类型\r\n\r\n`mcc` ：移动设备国家代码，string类型\r\n\r\n`mnc` ：移动设备网络代码，string类型\r\n\r\n* 示例\r\n\r\n```\r\n>>> net.operatorName()\r\n('CHN-UNICOM', 'UNICOM', '460', '01')\r\n```\r\n\r\n\r\n\r\n","prefix":"net.operatorName()"},"net.setModemFun(function, rst)":{"body":"net.setModemFun (${1:function}),(${2: rst})","description":"设置当前SIM模式。\r\n例子：\r\n| 参数     | 参数类型 | 参数说明                                                     |\r\n| -------- | -------- | ------------------------------------------------------------ |\r\n| function | int      | 设置SIM卡模式，0 - 全功能关闭， 1 - 全功能开启， 4 - 飞行模式 |\r\n| rst      | int      | 可选参数 ，0 - 设置立即生效（默认为0），1 - 设置完重启       |\r\n\r\n* 返回值\r\n\r\n设置成功返回整型值0，设置失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> net.setModemFun(4)\r\n0\r\n```\r\n\r\n\r\n\r\n#### fota - 固件升级\r\n\r\n模块功能：固件升级。\r\n\r\n**创建fota对象**\r\n\r\n","prefix":"net.setModemFun(function, rst)"},"ntptime.host":{"body":"ntptime.host","description":"返回当前的ntp服务器，默认为\"ntp.aliyun.com\"。\r\n例子：\r\n","prefix":"ntptime.host"},"ntptime.sethost(host)":{"body":"ntptime.sethost(${1:host})","description":"设置ntp服务器。\r\n例子：\r\n| 参数 | 类型   | 说明          |\r\n| :--- | :----- | ------------- |\r\n| host | string | ntp服务器地址 |\r\n\r\n* 返回值\r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n\r\n\r\n","prefix":"ntptime.sethost(host)"},"ntptime.settime()":{"body":"ntptime.settime()","description":"同步ntp时间。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n\r\n\r\n**ntptime使用示例**\r\n\r\n```python\r\nimport ntptime\r\n\r\nntptime.sethost('pool.ntp.org')   # set the ntp service\r\nntptime.settime()   # sync the local time\r\n```\r\n\r\n\r\n","prefix":"ntptime.settime()"},"pwm = PWM(PWM.PWMn, highTime, cycleTime)":{"body":"pwm = PWM (${1:PWM.PWMn}),(${2: highTime}),(${3: cycleTime})","description":"* 参数\r\n例子：\r\n| PWMn      | int      | PWM号<br/>注：EC100YCN平台，支持PWM0~PWM5，对应引脚如下：<br/>PWM0 – 引脚号19<br/>PWM1 – 引脚号18<br/>PWM2 – 引脚号16<br/>PWM3 – 引脚号17<br/>PWM4 – 引脚号23<br/>PWM5 – 引脚号22 |\r\n| highTime  | int      | 高电平时间，单位ms                                           |\r\n| cycleTime | int      | pwm一个周期时间，单位ms                                      |\r\n\r\n* 示例\r\n\r\n```\r\n>>> from misc import PWM\r\n>>> pwm4 = PWM(PWM.PWM4, 100, 200)\r\n```\r\n\r\n\r\n\r\n","prefix":"pwm = PWM(PWM.PWMn, highTime, cycleTime)"},"pwm.close()":{"body":"pwm.close()","description":"关闭PWM输出。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回整型0，失败返回整型-1。\r\n\r\n\r\n\r\n##### ADC\r\n\r\n**常量说明**\r\n\r\n| 常量     | 说明     |\r\n| -------- | -------- |\r\n| ADC.ADC0 | ADC通道0 |\r\n| ADC.ADC1 | ADC通道1 |\r\n\r\n\r\n\r\n**创建一个ADC对象**\r\n\r\n","prefix":"pwm.close()"},"pwm.open()":{"body":"pwm.open()","description":"开启PWM输出。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回整型0，失败返回整型-1。\r\n\r\n\r\n\r\n","prefix":"pwm.open()"},"request.delete(url, data, json, headers)":{"body":"request.delete (${1:url}),(${2: data}),(${3: json}),(${4: headers})","description":"发送DELETE请求。\r\n例子：\r\n| 参数    | 类型         | 说明                                                   |\r\n| ------- | ------------ | ------------------------------------------------------ |\r\n| url     | string       | 网址                                                   |\r\n| data    | json格式dict | （可选参数）附加到请求的正文，json字典类型，默认为None |\r\n| json    | json         | （可选参数）json格式用于附加到请求的主体，默认为None   |\r\n| headers | dict         | （可选参数）请求头，默认为None                         |\r\n\r\n* 示例\r\n\r\n```python\r\nimport request\r\nurl = http://httpbin.org/delete\r\nresponse = request.delete(url)\r\n```\r\n\r\n\r\n\r\n**Response类方法说明**\r\n\r\n","prefix":"request.delete(url, data, json, headers)"},"request.get(url, data, json, headers)":{"body":"request.get (${1:url}),(${2: data}),(${3: json}),(${4: headers})","description":"发送GET请求。\r\n例子：\r\n| 参数    | 类型         | 说明                                                   |\r\n| ------- | ------------ | ------------------------------------------------------ |\r\n| url     | string       | 网址                                                   |\r\n| data    | json格式dict | （可选参数）附加到请求的正文，json字典类型，默认为None |\r\n| json    | json         | （可选参数）json格式用于附加到请求的主体，默认为None   |\r\n| headers | dict         | （可选参数）请求头，默认为None                         |\r\n\r\n* 示例\r\n\r\n```python\r\nimport request\r\nurl = http://httpbin.org/get\r\nresponse = request.get(url)\r\n```\r\n\r\n\r\n\r\n","prefix":"request.get(url, data, json, headers)"},"request.head(url, data, json, headers)":{"body":"request.head (${1:url}),(${2: data}),(${3: json}),(${4: headers})","description":"发送HEAD请求。\r\n例子：\r\n| 参数    | 类型         | 说明                                                   |\r\n| ------- | ------------ | ------------------------------------------------------ |\r\n| url     | string       | 网址                                                   |\r\n| data    | json格式dict | （可选参数）附加到请求的正文，json字典类型，默认为None |\r\n| json    | json         | （可选参数）json格式用于附加到请求的主体，默认为None   |\r\n| headers | dict         | （可选参数）请求头，默认为None                         |\r\n\r\n* 示例\r\n\r\n```python\r\nimport request\r\nurl = http://httpbin.org/head\r\nresponse = request.head(url)\r\n```\r\n\r\n\r\n\r\n","prefix":"request.head(url, data, json, headers)"},"request.patch(url, data, json, headers)":{"body":"request.patch (${1:url}),(${2: data}),(${3: json}),(${4: headers})","description":"发送PATCH请求。\r\n例子：\r\n| 参数    | 类型         | 说明                                                   |\r\n| ------- | ------------ | ------------------------------------------------------ |\r\n| url     | string       | 网址                                                   |\r\n| data    | json格式dict | （可选参数）附加到请求的正文，json字典类型，默认为None |\r\n| json    | json         | （可选参数）json格式用于附加到请求的主体，默认为None   |\r\n| headers | dict         | （可选参数）请求头，默认为None                         |\r\n\r\n* 示例\r\n\r\n```python\r\nimport request\r\nurl = http://httpbin.org/patch\r\nresponse = request.patch(url)\r\n```\r\n\r\n\r\n\r\n","prefix":"request.patch(url, data, json, headers)"},"request.post(url, data, json, headers)":{"body":"request.post (${1:url}),(${2: data}),(${3: json}),(${4: headers})","description":"发送POST请求。\r\n例子：\r\n| 参数    | 类型         | 说明                                                   |\r\n| ------- | ------------ | ------------------------------------------------------ |\r\n| url     | string       | 网址                                                   |\r\n| data    | json格式dict | （可选参数）附加到请求的正文，json字典类型，默认为None |\r\n| json    | json         | （可选参数）json格式用于附加到请求的主体，默认为None   |\r\n| headers | dict         | （可选参数）请求头，默认为None                         |\r\n\r\n* 示例\r\n\r\n```python\r\nimport request\r\nurl = http://httpbin.org/post\r\nresponse = request.post(url)\r\n```\r\n\r\n\r\n\r\n","prefix":"request.post(url, data, json, headers)"},"request.put(url, data, json, headers)":{"body":"request.put (${1:url}),(${2: data}),(${3: json}),(${4: headers})","description":"发送PUT请求。\r\n例子：\r\n| 参数    | 类型         | 说明                                                   |\r\n| ------- | ------------ | ------------------------------------------------------ |\r\n| url     | string       | 网址                                                   |\r\n| data    | json格式dict | （可选参数）附加到请求的正文，json字典类型，默认为None |\r\n| json    | json         | （可选参数）json格式用于附加到请求的主体，默认为None   |\r\n| headers | dict         | （可选参数）请求头，默认为None                         |\r\n\r\n* 示例\r\n\r\n```python\r\nimport request\r\nurl = http://httpbin.org/put\r\nresponse = request.put(url)\r\n```\r\n\r\n\r\n\r\n","prefix":"request.put(url, data, json, headers)"},"response =request.get(url)":{"body":"response =request.get(${1:url})","description":"| 方法             | 说明                                    |\r\n例子：\r\n| response.json()  | 返回响应的json编码内容并转为dict类型    |\r\n| response.close() | 关闭socket                              |\r\n\r\n\r\n\r\n**request使用示例**\r\n\r\n```python\r\nimport request\r\nimport ujson\r\n\r\nurl = \"http://httpbin.org/post\"\r\ndata = {\"key1\": \"value1\", \"key2\": \"value2\", \"key3\": \"value3\"}\r\n\r\n# POST请求\r\nresponse = http.request.post(\"POST\", url, data=ujson.dumps(data))\r\nprint(response.text)\r\n```\r\n\r\n\r\n\r\n#### log - 日志\r\n\r\n模块功能：系统日志记录,分级别日志工具。\r\n\r\n","prefix":"response =request.get(url)"},"rtc = RTC()":{"prefix":"rtc = RTC()"},"rtc.datetime([year, month, day, week, hour, minute, second, microsecond])":{"body":"rtc.datetime (${1:[year}),(${2: month}),(${3: day}),(${4: week}),(${5: hour}),(${6: minute}),(${7: second}),(${8: microsecond]})","description":"设置和获取RTC时间，不带参数时，则用于获取时间，带参数则是设置时间；设置时间的时候，参数week不参于设置，microsecond参数保留，暂未使用，默认是0。\r\n例子：\r\n| 参数        | 类型 | 说明                                                         |\r\n| ----------- | ---- | ------------------------------------------------------------ |\r\n| year        | int  | 年                                                           |\r\n| month       | int  | 月                                                           |\r\n| day         | int  | 日                                                           |\r\n| week        | int  | 星期，设置时间时，该参数不起作用，保留；获取时间时该参数有效 |\r\n| hour        | int  | 时                                                           |\r\n| minute      | int  | 分                                                           |\r\n| second      | int  | 秒                                                           |\r\n| microsecond | int  | 微秒，保留参数，暂未使用，设置时间时该参数写0即可            |\r\n\r\n* 返回值\r\n\r\n获取时间时，返回一个元组，包含日期时间，格式如下：\r\n\r\n`[year, month, day, week, hour, minute, second, microsecond]`\r\n\r\n设置时间时，设置成功返回整型值0，设置失败返回整型值-1 。\r\n\r\n* 示例\r\n\r\n```\r\n>>> from machine import RTC\r\n>>> rtc = RTC()\r\n>>> rtc.datetime()\r\n(2020, 9, 11, 5, 15, 43, 23, 0)\r\n>>> rtc.datetime([2020, 3, 12, 1, 12, 12, 12, 0])\r\n0\r\n>>> rtc.datetime()\r\n(2020, 3, 12, 4, 12, 12, 14, 0)\r\n```\r\n\r\n\r\n\r\n##### I2C\r\n\r\n类功能：用于设备之间通信的双线协议。\r\n\r\n**常量说明**\r\n\r\n| 常量              |                   |\r\n| ----------------- | ----------------- |\r\n| I2C.I2C0          | i2c 通路索引号: 0 |\r\n| I2C.I2C1          | i2c 通路索引号: 1 |\r\n| I2C.STANDARD_MODE | 标准模式          |\r\n| I2C.FAST_MODE     | 快速模式          |\r\n\r\n**创建I2C对象**\r\n\r\n","prefix":"rtc.datetime([year, month, day, week, hour, minute, second, microsecond])"},"sim. writePhonebook(storage, index, username, number)":{"body":"sim. writePhonebook (${1:storage}),(${2: index}),(${3: username}),(${4: number})","description":"写入一条电话号码记录。\r\n例子：\r\n| 参数     | 参数类型 | 参数说明                                                     |\r\n| -------- | -------- | ------------------------------------------------------------ |\r\n| storage  | int      | 需要读取电话号码记录的电话本存储位置，可选参数如下：<br/>0 – DC，1 – EN，2 – FD，3 – LD，4 – MC，5 – ME，6 – MT，7 – ON，<br/>8 – RC，9 – SM，10 – AP，11 – MBDN，12 – MN，13 – SDN，14 – ICI，15 - OCI |\r\n| index    | int      | 需要写入电话号码记录的在电话簿中的编号                       |\r\n| username | string   | 电话号码的用户名                                             |\r\n| number   | string   | 电话号码                                                     |\r\n\r\n* 返回值\r\n\r\n写入成功返回整型0，写入失败返回整型-1。\r\n\r\n\r\n\r\n#### net - 网络相关功能\r\n\r\n模块功能：该模块提供配置和查询网络模式信息等接口。\r\n\r\n","prefix":"sim. writePhonebook(storage, index, username, number)"},"sim.changePin(oldPin, newPin)":{"body":"sim.changePin (${1:oldPin}),(${2: newPin})","description":"更改sim卡PIN码。\r\n例子：\r\n| 参数   | 参数类型 | 参数说明  |\r\n| ------ | -------- | --------- |\r\n| oldPin | string   | 旧的PIN码 |\r\n| newPin | string   | 新的PIN码 |\r\n\r\n* 返回值\r\n\r\n更改成功返回整型0，更改失败返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> sim.changePin(\"1234\", \"4321\")\r\n0\r\n```\r\n\r\n\r\n\r\n","prefix":"sim.changePin(oldPin, newPin)"},"sim.disablePin(pin)":{"body":"sim.disablePin(${1:pin})","description":"关闭sim卡PIN码验证。\r\n例子：\r\n| 参数 | 参数类型 | 参数说明                |\r\n| ---- | -------- | ----------------------- |\r\n| pin  | string   | PIN码，一般默认是‘1234’ |\r\n\r\n* 返回值\r\n\r\n成功返回整型0，失败返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> sim.disablePin(\"1234\")\r\n0\r\n```\r\n\r\n\r\n\r\n","prefix":"sim.disablePin(pin)"},"sim.enablePin(pin)":{"body":"sim.enablePin(${1:pin})","description":"启用sim卡PIN码验证，开启后需要输入正确的PIN验证成功后，sim卡才能正常使用。只有3次输入PIN码机会，3次都错误，sim卡被锁定，需要PUK来解锁。\r\n例子：\r\n| 参数 | 参数类型 | 参数说明                |\r\n| ---- | -------- | ----------------------- |\r\n| pin  | string   | PIN码，一般默认是‘1234’ |\r\n\r\n* 返回值\r\n\r\n成功返回整型0，失败返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> sim.enablePin(\"1234\")\r\n0\r\n```\r\n\r\n\r\n\r\n","prefix":"sim.enablePin(pin)"},"sim.getIccid()":{"body":"sim.getIccid()","description":"获取sim卡的iccid。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回string类型的iccid，失败返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> sim.getIccid()\r\n'89860390845513443049'\r\n```\r\n\r\n\r\n\r\n","prefix":"sim.getIccid()"},"sim.getImsi()":{"body":"sim.getImsi()","description":"获取sim卡的imsi。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回string类型的imsi，失败返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> import sim\r\n>>> sim.getImsi()\r\n'460185466870381'\r\n```\r\n\r\n\r\n\r\n","prefix":"sim.getImsi()"},"sim.getPhoneNumber()":{"body":"sim.getPhoneNumber()","description":"获取sim卡的电话号码。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回string类型的phone number，失败返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> sim.getPhoneNumber()\r\n'+8618166328752'\r\n```\r\n\r\n\r\n\r\n","prefix":"sim.getPhoneNumber()"},"sim.getStatus()":{"body":"sim.getStatus()","description":"获取sim卡的状态。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n| 返回值 | 说明                                                         |\r\n| ------ | ------------------------------------------------------------ |\r\n| 0      | SIM was removed.                                             |\r\n| 1      | SIM is ready.                                                |\r\n| 2      | Expecting the universal PIN./SIM is locked, waiting for a CHV1 password. |\r\n| 3      | Expecting code to unblock the universal PIN./SIM is blocked, CHV1 unblocking password is required. |\r\n| 4      | SIM is locked due to a SIM/USIM personalization check failure. |\r\n| 5      | SIM is blocked due to an incorrect PCK; an MEP unblocking password is required. |\r\n| 6      | Expecting key for hidden phone book entries.                 |\r\n| 7      | Expecting code to unblock the hidden key.                    |\r\n| 8      | SIM is locked; waiting for a CHV2 password.                  |\r\n| 9      | SIM is blocked; CHV2 unblocking password is required.        |\r\n| 10     | SIM is locked due to a network personalization check failure. |\r\n| 11     | SIM is blocked due to an incorrect NCK; an MEP unblocking password is required. |\r\n| 12     | SIM is locked due to a network subset personalization check failure. |\r\n| 13     | SIM is blocked due to an incorrect NSCK; an MEP unblocking password is required. |\r\n| 14     | SIM is locked due to a service provider personalization check failure. |\r\n| 15     | SIM is blocked due to an incorrect SPCK; an MEP unblocking password is required. |\r\n| 16     | SIM is locked due to a corporate personalization check failure. |\r\n| 17     | SIM is blocked due to an incorrect CCK; an MEP unblocking password is required. |\r\n| 18     | SIM is being initialized; waiting for completion.            |\r\n| 19     | Use of CHV1/CHV2/universal PIN/code to unblock the CHV1/code to unblock the CHV2/code to unblock the universal PIN/ is blocked. |\r\n| 20     | Unknow status.                                               |\r\n\r\n\r\n\r\n","prefix":"sim.getStatus()"},"sim.readPhonebook(storage, start, end, username)":{"body":"sim.readPhonebook (${1:storage}),(${2: start}),(${3: end}),(${4: username})","description":"获取 SIM 卡上指定电话本中的一条或多条电话号码记录。\r\n例子：\r\n| 参数     | 参数类型 | 参数说明                                                     |\r\n| -------- | -------- | ------------------------------------------------------------ |\r\n| storage  | int      | 需要读取电话号码记录的电话本存储位置，可选参数如下：<br/>0 – DC，1 – EN，2 – FD，3 – LD，4 – MC，5 – ME，6 – MT，7 – ON，<br/>8 – RC，9 – SM，10 – AP，11 – MBDN，12 – MN，13 – SDN，14 – ICI，15 - OCI |\r\n| start    | int      | 需要读取电话号码记录的起始编号，start为 0 表示不使用编号获取电话号码记 |\r\n| end      | int      | 需要读取电话号码记录的结束编号                               |\r\n| username | string   | 当 start为 0 时有效，电话号码中的用户名                      |\r\n\r\n* 返回值\r\n\r\n读取失败返回整型-1，成功返回一个元组，包含读取记录，格式如下：\r\n\r\n`(record_number, [(index, username, phone_number), ... , (index, username, phone_number)])`\r\n\r\n返回值参数说明：\r\n\r\n`record_number` – 读取的记录数量，整型\r\n\r\n`index` – 在电话簿中的索引位置，整型\r\n\r\n`username` – 姓名，string类型\r\n\r\n`phone_number` – 电话号码，string类型\r\n\r\n* 示例\r\n\r\n```\r\n>>> sim.readPhonebook(9, 1, 3, \"\")\r\n(3,[(1,'zhangsan','15544272539'),(2,'lisi','15544272539'),(3,'wangwu','18144786859')])\r\n```\r\n\r\n\r\n\r\n","prefix":"sim.readPhonebook(storage, start, end, username)"},"sim.unblockPin(puk, newPin)":{"body":"sim.unblockPin (${1:puk}),(${2: newPin})","description":"sim卡解锁。当多次错误输入 PIN/PIN2 码后，SIM 卡状态为请求 PUK/PUK2 时，输入 PUK/PUK2 码和新的 PIN/PIN2 码进行解锁，puk码输入10次错误，SIM卡将被永久锁定自动报废。\r\n例子：\r\n| 参数   | 参数类型 | 参数说明           |\r\n| ------ | -------- | ------------------ |\r\n| puk    | string   | PUK码，长度8位数字 |\r\n| newPin | string   | 新PIN码            |\r\n\r\n* 返回值\r\n\r\n解锁成功返回整型0，解锁失败返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> sim.unblockPin(\"12345678\", \"0000\")\r\n0\r\n```\r\n\r\n\r\n\r\n","prefix":"sim.unblockPin(puk, newPin)"},"sim.verifyPin(pin)":{"body":"sim.verifyPin(${1:pin})","description":"sim卡PIN码验证。需要在调用sim.enablePin(pin)成功之后，才能进行验证，验证成功后，sim卡才能正常使用。\r\n例子：\r\n| 参数 | 参数类型 | 参数说明                |\r\n| ---- | -------- | ----------------------- |\r\n| pin  | string   | PIN码，一般默认是‘1234’ |\r\n\r\n* 返回值\r\n\r\n验证成功返回整型0，验证失败返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> sim.verifyPin(\"1234\")\r\n0\r\n```\r\n\r\n\r\n\r\n","prefix":"sim.verifyPin(pin)"},"socket.accept()":{"body":"socket.accept()","description":"接受连接请求，返回元组，包含新的套接字和客户端地址，形式为：`(conn, address)`\r\n例子：\r\n* `address` ：连接到服务器的客户端地址\r\n\r\n\r\n\r\n","prefix":"socket.accept()"},"socket.bind(address)":{"body":"socket.bind(${1:address})","description":"绑定地址address。在此之前，socket必须没有绑定过。\r\n例子：\r\n示例：\r\n\r\n```\r\naddr = ('127.0.0.1', 6000)\r\nsocket.bind(addr)\r\n```\r\n\r\n\r\n\r\n","prefix":"socket.bind(address)"},"socket.close()":{"body":"socket.close()","description":"将套接字标记为关闭并释放所有资源。\r\n例子：\r\n","prefix":"socket.close()"},"socket.connect(address)":{"body":"socket.connect(${1:address})","description":"连接到指定地址address的服务器。\r\n例子：\r\n\r\n\r\n","prefix":"socket.connect(address)"},"socket.listen(backlog)":{"body":"socket.listen(${1:backlog})","description":"允许服务端接受连接，可指定最大连接数。\r\n例子：\r\n\r\n\r\n","prefix":"socket.listen(backlog)"},"socket.makefile(mode='rb')":{"body":"socket.makefile(${1:mode='rb'})","description":"返回与套接字关联的文件对象，返回值类型与指定的参数有关。仅支持二进制模式 (rb和wb)。\r\n例子：\r\n**socket通信示例**：\r\n\r\n```\r\n# 客户端示例\r\nimport usocket\r\nclient = usocket.socket(usocket.AF_INET, usocket.SOCK_STREAM)\r\nsockaddr = usocket.getaddrinfo('www.tongxinmao.com',80)[0][-1]\r\nclient.connect(sockaddr)\r\nwhile True:\r\n    re_data = input()\r\n    client.send(re_data.encode(\"utf8\"))\r\n    data = client.recv(1024)\r\n    print(data.decode(\"utf8\"))\r\n\r\n```\r\n\r\n\r\n\r\n#### uio - 输入输出流\r\n\r\nuio 模块包含其他类型的stream（类文件）对象和辅助函数。该模块实现相应CPython模块的子集。更多信息请参阅阅CPython文档：[io](https://docs.python.org/3.5/library/io.html#module-io)\r\n\r\n","prefix":"socket.makefile(mode='rb')"},"socket.read( [ size ] )":{"body":"socket.read(${1: [ size ] })","description":"从套接字中读取size字节数据，返回一个字节对象。如果没有指定size，则会从套接字读取所有可读数据，直到读取到数据结束，此时作用和 `socket.readall()` 相同。\r\n例子：\r\n","prefix":"socket.read( [ size ] )"},"socket.readinto(buf, [ , nbytes ])":{"body":"socket.readinto (${1:buf}),(${2: [ }),(${3: nbytes ]})","description":"将字节读取到缓冲区buf中。如果指定了nbytes，则最多读取nbytes数量的字节；如果没有指定nbytes，则最多读取len(buf)字节。返回值是实际读取的字节数。\r\n例子：\r\n","prefix":"socket.readinto(buf, [ , nbytes ])"},"socket.readline()":{"body":"socket.readline()","description":"按行读取数据，遇到换行符结束，返回读取的数据行。\r\n例子：\r\n","prefix":"socket.readline()"},"socket.recv(bufsize)":{"body":"socket.recv(${1:bufsize})","description":"从套接字接收数据。返回值是一个字节对象，表示接收到的数据。一次接收的最大数据量由bufsize指定。\r\n例子：\r\n\r\n\r\n","prefix":"socket.recv(bufsize)"},"socket.recvfrom(bufsize)":{"body":"socket.recvfrom(${1:bufsize})","description":"从套接字接收数据。返回一个元组，包含字节对象和地址。\r\n例子：\r\n* bytes ：接收数据的字节对象\r\n\r\n* address ：发送数据的套接字的地址\r\n\r\n\r\n\r\n","prefix":"socket.recvfrom(bufsize)"},"socket.send(bytes)":{"body":"socket.send(${1:bytes})","description":"发送数据，返回实际发送的字节数。\r\n例子：\r\n\r\n\r\n","prefix":"socket.send(bytes)"},"socket.sendall(bytes)":{"body":"socket.sendall(${1:bytes})","description":"将所有数据都发送到套接字。与`send()`方法不同的是，此方法将尝试通过依次逐块发送数据来发送所有数据。\r\n例子：\r\n* `bytes` ：bytes型数据\r\n\r\n\r\n\r\n","prefix":"socket.sendall(bytes)"},"socket.sendto(bytes, address)":{"body":"socket.sendto (${1:bytes}),(${2: address})","description":"将数据发送到套接字。该套接字不应连接到远程套接字，因为目标套接字是由*address*指定的。\r\n例子：\r\n* `address` ：包含地址和端口号的元组或列表\r\n\r\n\r\n\r\n","prefix":"socket.sendto(bytes, address)"},"socket.setblocking(flag)":{"body":"socket.setblocking(${1:flag})","description":"设置套接字为阻塞模式或者非阻塞模式。如果标志为false，则将套接字设置为非阻塞，否则设置为阻塞模式。\r\n例子：\r\n`socket.setblocking(True)` 相当于 `socket.settimeout(None)`\r\n\r\n`socket.setblocking(False)` 相当于 `socket.settimeout(0)`\r\n\r\n\r\n\r\n","prefix":"socket.setblocking(flag)"},"socket.setsockopt(level, optname, value)":{"body":"socket.setsockopt (${1:level}),(${2: optname}),(${3: value})","description":"设置套接字选项的值。\r\n例子：\r\n* `optname` ：socket选项\r\n\r\n* `value` ：既可以是一个整数，也可以是一个表示缓冲区的bytes类对象\r\n\r\n示例：\r\n\r\n```\r\nsocket.setsockopt(usocket.SOL_SOCKET, usocket.SO_REUSEADDR, 1)\r\n```\r\n\r\n\r\n\r\n","prefix":"socket.setsockopt(level, optname, value)"},"socket.settimeout(value)":{"body":"socket.settimeout(${1:value})","description":"设置套接字的超时时间，单位秒。\r\n例子：\r\n\r\n\r\n","prefix":"socket.settimeout(value)"},"socket.write(buf)":{"body":"socket.write(${1:buf})","description":"写入缓冲区的数据，返回实际写入的字节数。\r\n例子：\r\n","prefix":"socket.write(buf)"},"sys.argv":{"body":"sys.argv","description":"当前程序启动的可变参数列表。\r\n例子：\r\n字节顺序 (‘little’  - 小端， ‘big’ - 大端)。\r\n\r\n","prefix":"sys.argv"},"sys.byteorder":{"body":"sys.byteorder","description":"字节顺序 (‘little’  - 小端， ‘big’ - 大端)。\r\n例子：\r\n返回当前microPython版本信息。对于MicroPython，它具有以下属性：\r\n\r\n- name - 字符串“ micropython”\r\n- version - 元组（主要，次要，微型），例如（1、7、0）\r\n\r\n建议使用此对象来将MicroPython与其他Python实现区分开。\r\n\r\n","prefix":"sys.byteorder"},"sys.exit(retval=0)":{"body":"sys.exit(${1:retval=0})","description":"使用给定的参数退出当前程序。与此同时，该函数会引发`SystemExit`退出。如果给定了参数，则将其值作为参数赋值给`SystemExit`。\r\n例子：\r\n","prefix":"sys.exit(retval=0)"},"sys.implementation":{"body":"sys.implementation","description":"返回当前microPython版本信息。对于MicroPython，它具有以下属性：\r\n例子：\r\n\r\n建议使用此对象来将MicroPython与其他Python实现区分开。\r\n\r\n","prefix":"sys.implementation"},"sys.maxsize":{"body":"sys.maxsize","description":"本机整数类型可以在当前平台上保留的最大值，如果它小于平台最大值，则为MicroPython整数类型表示的最大值（对于不支持长整型的MicroPython端口就是这种情况）。\r\n例子：\r\n已载入模块的字典。\r\n\r\n","prefix":"sys.maxsize"},"sys.modules":{"body":"sys.modules","description":"已载入模块的字典。\r\n例子：\r\nMicroPython运行的平台。\r\n\r\n","prefix":"sys.modules"},"sys.platform":{"body":"sys.platform","description":"MicroPython运行的平台。\r\n例子：\r\n标准输入（默认是USB虚拟串口，可选其他串口）。\r\n\r\n","prefix":"sys.platform"},"sys.print_exception(exc, file=sys.stdout)":{"body":"sys.print_exception (${1:exc}),(${2: file=sys.stdout})","description":"打印异常到文件对象，默认是 sys.stdout，即输出异常信息的标准输出。\r\n例子：\r\n#### uzlib - zlib解压缩\r\n\r\nuzlib 模块解压缩用[DEFLATE算法](https://en.wikipedia.org/wiki/DEFLATE)压缩的二进制数据 （通常在zlib库和gzip存档器中使用），压缩尚未实现。该模块实现相应CPython模块的子集。更多信息请参阅阅CPython文档：[zlib](https://docs.python.org/3.5/library/zlib.html#module-zlib)\r\n\r\n注意：解压缩前，应检查模块内可使用的空间，确保有足够空间解压文件。\r\n\r\n","prefix":"sys.print_exception(exc, file=sys.stdout)"},"sys.stdin":{"body":"sys.stdin","description":"标准输入（默认是USB虚拟串口，可选其他串口）。\r\n例子：\r\n标准输出（默认是USB虚拟串口，可选其他串口）。\r\n\r\n","prefix":"sys.stdin"},"sys.stdout":{"body":"sys.stdout","description":"标准输出（默认是USB虚拟串口，可选其他串口）。\r\n例子：\r\nMicroPython 语言版本，字符串格式。\r\n\r\n","prefix":"sys.stdout"},"sys.version":{"body":"sys.version","description":"MicroPython 语言版本，字符串格式。\r\n例子：\r\nMicroPython  语言版本，整数元组格式。\r\n\r\n\r\n\r\n**方法**\r\n\r\n","prefix":"sys.version"},"sys.version_info":{"body":"sys.version_info","description":"MicroPython  语言版本，整数元组格式。\r\n例子：\r\n**方法**\r\n\r\n","prefix":"sys.version_info"},"timer = Timer(Timern)":{"body":"timer = Timer(${1:Timern})","description":"创建Timer对象。\r\n例子：\r\n| 参数   | 类型 | 说明                                          |\r\n| ------ | ---- | --------------------------------------------- |\r\n| Timern | int  | 定时器号<br />EC100YCN支持定时器Timer0~Timer3 |\r\n\r\n* 示例\r\n\r\n```\r\n>>> from machine import Timer\r\n>>> timer1 = Timer(Timer.Timer1)\r\n```\r\n\r\n\r\n\r\n","prefix":"timer = Timer(Timern)"},"timer.start(period, mode, callback)":{"body":"timer.start (${1:period}),(${2: mode}),(${3: callback})","description":"启动定时器。\r\n例子：\r\n| 参数     | 类型     | 说明                                                         |\r\n| -------- | -------- | ------------------------------------------------------------ |\r\n| period   | int      | 中断周期，单位毫秒                                           |\r\n| mode     | int      | 运行模式<br />Timer.ONE_SHOT  单次模式，定时器只执行一次<br />Timer.PERIODIC    周期模式，循环执行 |\r\n| callback | function | 定时器执行函数                                               |\r\n\r\n* 返回值\r\n\r\n启动成功返回整型值0，失败返回整型值-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> def fun(args):\r\n        print(“###timer callback function###”)\r\n>>> timer.start(period=1000, mode=timer.PERIODIC, callback=fun)\r\n0\r\n###timer callback function###\r\n###timer callback function###\r\n###timer callback function###\r\n……\r\n```\r\n\r\n\r\n\r\n","prefix":"timer.start(period, mode, callback)"},"timer.stop()":{"body":"timer.stop()","description":"关闭定时器。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回整型值0，失败返回整型值-1。\r\n\r\n\r\n\r\n**Timer使用示例**\r\n\r\n```python\r\nfrom machine import Timer\r\ntimer1 = Timer(Timer.Timer1) #定时器1\r\ndef run(t):\r\n    print(\"run count\")\r\ntimer1.start(period=1000, mode=timer1.PERIODIC, callback=run)\r\nwhile 1:\r\n\tpass\r\n```\r\n\r\n\r\n\r\n##### ExtInt\r\n\r\n类功能：用于配置I/O引脚在发生外部事件时中断。\r\n\r\n**常量说明**\r\n\r\n| 常量                      | 说明             |\r\n| ------------------------- | ---------------- |\r\n| ExtInt.GPIO1              | GPIO1            |\r\n| ExtInt.GPIO2              | GPIO2            |\r\n| ExtInt.GPIO3              | GPIO3            |\r\n| ExtInt.GPIO4              | GPIO4            |\r\n| ExtInt.GPIO5              | GPIO5            |\r\n| ExtInt.IRQ_RISING         | 上升沿触发       |\r\n| ExtInt.IRQ_FALLING        | 下降沿触发       |\r\n| ExtInt.IRQ_RISING_FALLING | 上升和下降沿触发 |\r\n| ExtInt.PULL_DISABLE       | 浮空模式         |\r\n| ExtInt.PULL_PU            | 上拉模式         |\r\n| ExtInt.PULL_PD            | 下拉模式         |\r\n\r\n\r\n\r\n**创建ExtInt对象**\r\n\r\n","prefix":"timer.stop()"},"tts = audio.TTS(device)":{"body":"tts = audio.TTS(${1:device})","description":"* 参数\r\n例子：\r\n* 示例\r\n\r\n```\r\n>>> import audio\r\n>>> tts = audio.TTS(1)\r\n```\r\n\r\n\r\n\r\n","prefix":"tts = audio.TTS(device)"},"tts.close()":{"body":"tts.close()","description":"关闭TTS功能。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回整型0，失败返回整型-1。\r\n\r\n\r\n\r\n","prefix":"tts.close()"},"tts.getSpeed()":{"body":"tts.getSpeed()","description":"获取当前播放速度，速度值为0~9，值越大，速度越快。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回当前播放速度，失败返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> tts.getSpeed()\r\n4\r\n```\r\n\r\n\r\n\r\n","prefix":"tts.getSpeed()"},"tts.getState()":{"body":"tts.getState()","description":"获取tts状态。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n0 – 整型值，表示当前无tts播放；\r\n\r\n1 – 整型值，表示当前有tts正在播放。\r\n\r\n* 示例\r\n\r\n```\r\n>>> tts1 = audio.TTS(1)\r\n>>> tts1.getState()\r\n0\r\n>>> tts1.play(1, 0, 2, '8787878787878787') \r\n0\r\n>>> tts1.getState() #在上面tts播放过程中执行这句\r\n1\r\n```\r\n\r\n\r\n\r\n","prefix":"tts.getState()"},"tts.getVolume()":{"body":"tts.getVolume()","description":"获取当前播放音量大小，音量值为0~9，0表示静音。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回整型音量大小值，失败返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> tts.getVolume()\r\n4\r\n```\r\n\r\n\r\n\r\n","prefix":"tts.getVolume()"},"tts.play(priority, breakin, mode, str)":{"body":"tts.play (${1:priority}),(${2: breakin}),(${3: mode}),(${4: str})","description":"语音播放，支持优先级0~4，数字越大优先级越高，每个优先级组可同时最多加入10个播放任务；播放策略说明如下：\r\n例子：\r\n2. 如果当前正在播放任务A，并且不允许被打断，此时有高优先级播放任务B，那么B播放任务将会加入到播放队列中合适的位置，等待A播放完成，再依次从队列中按照优先级从高到低播放其他任务；\r\n\r\n3. 如果当前正在播放任务A，且不允许被打断，此时来了一个同优先级播放任务B，那么B会被加入到该优先级组播放队列队尾，等待A播放完成，再依次从队列中按照优先级从高到低播放其他任务；\r\n\r\n4. 如果当前正在播放任务A，且允许被打断，此时来了一个同优先级播放任务B，那么会打断当前播放任务A，直接播放任务B；\r\n\r\n5. 如果当前正在播放任务A，且任务A的优先级组播放队列中已经有几个播放任务存在，且该优先级组播放队列最后一个任务N是允许被打断的，此时如果来了一个同样优先级的播放任务B，那么任务B会直接覆盖掉任务N；也就是说，某个优先级组，只有最后一个元素是允许被打断的，即breakin为1，其他任务都是不允许被打断的；\r\n\r\n6. 如果当前正在播放任务A，不管任务A是否允许被打断，此时来了一个优先级低于任务A的请求B，那么将B加入到B对应优先级组播放队列。\r\n\r\n* 参数\r\n\r\n| 参数     | 参数类型 | 参数说明                                                     |\r\n| -------- | -------- | ------------------------------------------------------------ |\r\n| priority | int      | 播放优先级，支持优先级0~4，数值越大优先级越高                |\r\n| breakin  | int      | 打断模式，0表示不允许被打断，1表示允许被打断                 |\r\n| mode     | int      | 编码模式，1 - UNICODE16(Size end conversion)，2 - UTF-8，3 - UNICODE16(Don't convert) |\r\n| str      | string   | 待播放字符串                                                 |\r\n\r\n* 返回值\r\n\r\n播放成功返回整型0；\r\n\r\n播放失败返回整型-1；\r\n\r\n无法立即播放，加入播放队列，返回整型1；\r\n\r\n无法立即播放，且该请求的优先级组队列任务已达上限，无法加入播放队列，返回整型-2。\r\n\r\n* 示例\r\n\r\n```\r\n>>> import audio\r\n>>> tts = audio.TTS(1)\r\n#正在播放任务A，且A允许被打断，此时来了任务B，且优先级高于任务A，那么A会被#打断，直接播放B\r\n>>> tts.play(1, 1, 2, '1111111111111111')  #任务A\r\n0\r\n>>> tts.play(2, 0, 2, '2222222222222222')  #任务B\r\n0\r\n\r\n#正在播放任务A，且A不允许被打断，此时来了任务B，且优先级高于任务A，那么B会#被加入播放队列，等待A播放完成播放B（假设播放队列之前为空）\r\n>>> tts.play(1, 0, 2, '1111111111111111')  #任务A\r\n0\r\n>>> tts.play(2, 0, 2, '2222222222222222')  #任务B\r\n1\r\n\r\n#正在播放任务A，且A允许被打断，此时来了任务B，且优先级和A优先级一样，那么A\r\n#会被打断，直接播放B\r\n>>> tts.play(2, 1, 2, '2222222222222222222')  #任务A\r\n0\r\n>>> tts.play(2, 0, 2, '3333333333333333333')  #任务B\r\n0\r\n\r\n#正在播放任务A，且A不允许被打断，此时来了任务B，且优先级和A优先级一样，那么#B会被加入播放队列，等待A播放完成播放B（假设播放队列之前为空）\r\n>>> tts.play(2, 1, 2, '2222222222222222222')  #任务A\r\n0\r\n>>> tts.play(2, 0, 2, '3333333333333333333')  #任务B\r\n1\r\n\r\n#正在播放A，且A不允许被打断，此时来了任务B，且任务B允许被打断，优先级与A相同，那么任务B会被加入到播放队列中，此时又来了一个任务C，且优先级和A、B相同，那么C会被加入播放队列中，且直接覆盖率任务B，所以A播放完成下一个播放的是C（假设播放队列之前为空）\r\n>>> tts.play(2, 0, 2, '2222222222222222222')  #任务A\r\n0\r\n>>> tts.play(2, 1, 2, '3333333333333333333')  #任务B\r\n1\r\n>>> tts.play(2, 0, 2, '4444444444444444444')  #任务C\r\n1\r\n\r\n```\r\n\r\ntts播放中文示例：\r\n\r\n注意，python文件开头需要加上“# -*- coding: UTF-8 -*-”，如果播放的中文中有标点符号，要用英文的标点符号。\r\n\r\n```python\r\n# -*- coding: UTF-8 -*-\r\nimport audio\r\n\r\ntts = audio.TTS(1)\r\nstr1 = '移联万物,志高行远' #这里的逗号是英文的逗号\r\ntts.play(4, 0, 2, str1)\r\n```\r\n\r\n\r\n\r\n","prefix":"tts.play(priority, breakin, mode, str)"},"tts.setSpeed(speed)":{"body":"tts.setSpeed(${1:speed})","description":"设置TTS播放速度。\r\n例子：\r\n| 参数  | 参数类型 | 参数说明                              |\r\n| ----- | -------- | ------------------------------------- |\r\n| speed | int      | 速度值，速度值为0~9，值越大，速度越快 |\r\n\r\n* 返回值\r\n\r\n成功返回整型0，失败返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> tts.setSpeed(6)\r\n0\r\n```\r\n\r\n\r\n\r\n","prefix":"tts.setSpeed(speed)"},"tts.setVolume(vol)":{"body":"tts.setVolume(${1:vol})","description":"设置播放音量大小。\r\n例子：\r\n| 参数 | 参数类型 | 参数说明                       |\r\n| ---- | -------- | ------------------------------ |\r\n| vol  | int      | 音量值，音量值为0~9，0表示静音 |\r\n\r\n* 返回值\r\n\r\n成功返回整型音量值，失败返回整型-1。\r\n\r\n* 示例\r\n\r\n```\r\n>>> tts.setVolume(6)\r\n0\r\n```\r\n\r\n\r\n\r\n","prefix":"tts.setVolume(vol)"},"tts.stop()":{"body":"tts.stop()","description":"停止TTS播放。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回整型0，失败返回整型-1。\r\n\r\n\r\n\r\n##### Audio\r\n\r\n**创建一个对象**\r\n\r\n","prefix":"tts.stop()"},"uart = UART(UART.UARTn, buadrate, databits, parity, stopbits, flowctl)":{"body":"uart = UART (${1:UART.UARTn}),(${2: buadrate}),(${3: databits}),(${4: parity}),(${5: stopbits}),(${6: flowctl})","description":"* 参数\r\n例子：\r\n| UARTn    | int  | 端口号<br />EC100YCN平台,UARTn作用如下：<br />UART0 - DEBUG PORT<br />UART1 – BT PORT<br />UART2 – MAIN PORT<br />UART3 – USB CDC PORT |\r\n| buadrate | int  | 波特率，常用波特率都支持，如4800、9600、19200、38400、57600、115200、230400等 |\r\n| databits | int  | 数据位（5~8）                                                |\r\n| parity   | int  | 奇偶校验（0 – NONE，1 – EVEN，2 - ODD）                      |\r\n| stopbits | int  | 停止位（1~2）                                                |\r\n| flowctl  | int  | 硬件控制流（0 – FC_NONE， 1 – FC_HW）                        |\r\n\r\n* 示例\r\n\r\n```\r\n>>> from machine import UART\r\n>>> uart1 = UART(UART.UART1, 115200, 8, 0, 1, 0)\r\n```\r\n\r\n\r\n\r\n","prefix":"uart = UART(UART.UARTn, buadrate, databits, parity, stopbits, flowctl)"},"uart.any()":{"body":"uart.any()","description":"返回接收缓存器中有多少字节的数据未读。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n返回接收缓存器中有多少字节的数据未读。\r\n\r\n* 示例\r\n\r\n```\r\n>>> uart.any()\r\n20 #表示接收缓冲区中有20字节数据未读\r\n```\r\n\r\n\r\n\r\n","prefix":"uart.any()"},"uart.close()":{"body":"uart.close()","description":"关闭串口。\r\n例子：\r\n无\r\n\r\n* 返回值\r\n\r\n成功返回整型0，失败返回整型-1。\r\n\r\n\r\n\r\n**UART使用示例**\r\n\r\n```\r\n>>> from machine import UART\r\n>>> uart1 = UART(UART.UART1, 115200, 8, 0, 1, 0) #串口1\r\n>>> uart1.any()\r\n10\r\n>>> uart1.read(5)\r\nb’12345’\r\n>>> uart1.any()\r\n5\r\n```\r\n\r\n\r\n\r\n##### Timer\r\n\r\n类功能：定时器。\r\n\r\n**常量说明**\r\n\r\n| 常量           | 说明                       |\r\n| -------------- | -------------------------- |\r\n| Timer.Timer0   | 定时器0                    |\r\n| Timer.Timer1   | 定时器1                    |\r\n| Timer.Timer2   | 定时器2                    |\r\n| Timer.Timer3   | 定时器3                    |\r\n| Timer.ONE_SHOT | 单次模式，定时器只执行一次 |\r\n| Timer.PERIODIC | 周期模式，定时器循环执行   |\r\n\r\n\r\n\r\n**创建Timer对象**\r\n\r\n","prefix":"uart.close()"},"uart.read(nbytes)":{"body":"uart.read(${1:nbytes})","description":"从串口读取数据。\r\n例子：\r\n| 参数   | 类型 | 说明           |\r\n| ------ | ---- | -------------- |\r\n| nbytes | int  | 要读取的字节数 |\r\n\r\n* 返回值\r\n\r\n返回读取的数据。\r\n\r\n\r\n\r\n","prefix":"uart.read(nbytes)"},"uart.write(data)":{"body":"uart.write(${1:data})","description":"发送数据到串口。\r\n例子：\r\n| 参数 | 类型   | 说明       |\r\n| ---- | ------ | ---------- |\r\n| data | string | 发送的数据 |\r\n\r\n* 返回值\r\n\r\n返回发送的字节数。\r\n\r\n\r\n\r\n","prefix":"uart.write(data)"},"ubinascii.a2b_base64(data)":{"body":"ubinascii.a2b_base64(${1:data})","description":"解码base64编码的数据，会自动忽略输入中的无效字符，返回 bytes 对象。\r\n例子：\r\n> ubinascii.b2a_base64(data)\r\n\r\n以base64格式编码二进制数据，返回编码数据。后面跟换行符，作为 bytes 对象。\r\n\r\n\r\n\r\n","prefix":"ubinascii.a2b_base64(data)"},"ubinascii.hexlify(data, [sep])":{"body":"ubinascii.hexlify (${1:data}),(${2: [sep]})","description":"将二进制数据转换为十六进制字符串表示。\r\n例子：\r\n```\r\n>>> import ubinascii\r\n# 没有sep参数\r\n>>> ubinascii.hexlify('\\x11\\x22123')\r\nb'1122313233'\r\n>>> ubinascii.hexlify('abcdfg')\r\nb'616263646667'\r\n# 指定了第二个参数sep，它将用于分隔两个十六进制数\r\n>>> ubinascii.hexlify('\\x11\\x22123', ' ')\r\nb'11 22 31 32 33'\r\n>>> ubinascii.hexlify('\\x11\\x22123', ',')\r\nb'11,22,31,32,33'\r\n```\r\n\r\n\r\n\r\n","prefix":"ubinascii.hexlify(data, [sep])"},"ubinascii.unhexlify(data)":{"body":"ubinascii.unhexlify(${1:data})","description":"将十六进制形式的字符串转换成二进制形式的字符串表示。\r\n例子：\r\n```\r\n>>> import ubinascii\r\n>>> ubinascii.unhexlify('313222')\r\nb'12\"'\r\n```\r\n\r\n\r\n\r\n#### ucollections - 集合和容器类型\r\n\r\nucollections 模块用于创建一个新的容器类型，用于保存各种对象。该模块实现了CPython模块相应模块的子集。更多信息请参阅阅CPython文档：[collections](https://docs.python.org/3.5/library/collections.html#module-collections)\r\n\r\n","prefix":"ubinascii.unhexlify(data)"},"ujson.dump(obj, stream)":{"body":"ujson.dump (${1:obj}),(${2: stream})","description":"将 `obj` 数据对象转化成 JSON字符串，将其写入到给定的 `stream` 中。\r\n例子：\r\n","prefix":"ujson.dump(obj, stream)"},"ujson.dumps(dict)":{"body":"ujson.dumps(${1:dict})","description":"将 `dict` 类型的数据转换成str。\r\n例子：\r\n","prefix":"ujson.dumps(dict)"},"ujson.load(stream)":{"body":"ujson.load(${1:stream})","description":"解析给定的数据 `stream`，将其解释为JSON字符串并反序列化成Python对象。\r\n例子：\r\n","prefix":"ujson.load(stream)"},"ujson.loads(str)":{"body":"ujson.loads(${1:str})","description":"解析JSON字符串并返回`obj`对象\r\n例子：\r\n示例：\r\n\r\n```\r\n>>> import ujson\r\n>>> msg = ['foo',{'bar':('baz',None,1,2)}]\r\n>>> print(msg)\r\n['foo', {'bar': ('baz', None, 1, 2)}]\r\n>>> s = ujson.dumps(msg)\r\n>>> print(s)\r\n[\"foo\", {\"bar\": [\"baz\", null, 1, 2]}]\r\n>>> s1 = ujson.loads(s)\r\n>>> print(s1)\r\n['foo', {'bar': ['baz', None, 1, 2]}]\r\n```\r\n\r\n\r\n\r\n#### utime - 与时间相关功能\r\n\r\nutime 模块用于获取当前时间和日期、测量时间间隔和延迟。该模块实现相应CPython模块的子集。更多信息请参阅阅CPython文档：[time](https://docs.python.org/3.5/library/time.html#module-time)\r\n\r\n","prefix":"ujson.loads(str)"},"unstrcut.unpack(fmt, data)":{"body":"unstrcut.unpack (${1:fmt}),(${2: data})","description":"根据格式化字符串 fmt 对数据进行解压，返回值为一个元组。\r\n例子：\r\n```\r\n>>> import ustruct\r\n>>> ustruct.pack('ii', 7, 9)  #打包2两个整数\r\nb'\\x07\\x00\\x00\\x00\\t\\x00\\x00\\x00'\r\n>>> ustruct.unpack('ii', b'\\x07\\x00\\x00\\x00\\t\\x00\\x00\\x00')  #解压两个整数\r\n(7, 9)\r\n```\r\n\r\n\r\n\r\n","prefix":"unstrcut.unpack(fmt, data)"},"unstruct.unpack_from(fmt, data, offset=0)":{"body":"unstruct.unpack_from (${1:fmt}),(${2: data}),(${3: offset=0})","description":"根据格式化字符串 `fmt` 解析从 `offest` 开始的数据解压，从缓冲区末尾开始计数的偏移量可能为负值。返回值是解压值的元组。\r\n例子：\r\n#### ujson - JSON编码和解码\r\n\r\nujson 模块实现在Python数据对象和JSON数据格式之间进行转换的功能。该模块实现相应CPython模块的子集。更多信息请参阅阅CPython文档：[json](https://docs.python.org/3.5/library/json.html#module-json)\r\n\r\n","prefix":"unstruct.unpack_from(fmt, data, offset=0)"},"uos.chdir(path)":{"body":"uos.chdir(${1:path})","description":"改变当前目录。\r\n例子：\r\n","prefix":"uos.chdir(path)"},"uos.getcwd()":{"body":"uos.getcwd()","description":"获取当前路径。\r\n例子：\r\n","prefix":"uos.getcwd()"},"uos.ilistdir( [dir] )":{"body":"uos.ilistdir(${1: [dir] })","description":"该函数返回一个迭代器，该迭代器会生成所列出条目对应的3元组。没有参数时，默认列出当前目录，有参数时，则列出dir参数指定的目录。元组的形式为 `(name, type, inode[, size])`:\r\n例子：\r\n* 是一个与文件的索引节点相对应的整数，对于没有这种概念的文件系统来说，可能为0；\r\n* 一些平台可能会返回一个4元组，其中包含条目的size。对于文件条目，size表示文件大小的整数，如果未知，则为-1。对于目录项，其含义目前尚未定义。\r\n\r\n\r\n\r\n","prefix":"uos.ilistdir( [dir] )"},"uos.listdir( [dir] )":{"body":"uos.listdir(${1: [dir] })","description":"没有参数列出当前目录文件，否则列出给定目录的文件。\r\n例子：\r\n```\r\n>>> uos.listdir()\r\n[‘file1’, ‘read.txt’, ‘demo.py’]\r\n```\r\n\r\n\r\n\r\n","prefix":"uos.listdir( [dir] )"},"uos.mkdir(path)":{"body":"uos.mkdir(${1:path})","description":"创建一个新的目录。\r\n例子：\r\n```\r\n>>> uos.mkdir('testdir')\r\n>>> uos.listdir()\r\n[‘file1’, ‘read.txt’, ‘demo.py’, 'testdir']\r\n```\r\n\r\n\r\n\r\n","prefix":"uos.mkdir(path)"},"uos.remove(path)":{"body":"uos.remove(${1:path})","description":"删除文件。\r\n例子：\r\n","prefix":"uos.remove(path)"},"uos.rename(old_path, new_path)":{"body":"uos.rename (${1:old_path}),(${2: new_path})","description":"重命名文件。\r\n例子：\r\n```\r\n>>> uos.rename('testdir', 'testdir1')\r\n```\r\n\r\n\r\n\r\n","prefix":"uos.rename(old_path, new_path)"},"uos.rmdir(path)":{"body":"uos.rmdir(${1:path})","description":"删除指定目录。\r\n例子：\r\n```\r\n>>> uos.rmdir('testdir')\r\n>>> uos.listdir()\r\n[‘file1’, ‘read.txt’, ‘demo.py’]\r\n```\r\n\r\n\r\n\r\n","prefix":"uos.rmdir(path)"},"uos.stat(path)":{"body":"uos.stat(${1:path})","description":"获取文件或目录的状态。返回值是一个元组，返回值形式为：\r\n例子：\r\n* `mode` – inode保护模式\r\n* `ino` – inode节点号\r\n* `dev`  – inode驻留的设备\r\n* `nlink`  – inode的链接数\r\n* `uid ` – 所有者的用户ID\r\n* `gid`  – 所有者的组ID\r\n* `size`  – 文件大小，单位字节\r\n* `atime`  – 上次访问的时间\r\n* `mtime`  – 最后一次修改的时间\r\n* `ctime`  – 操作系统报告的“ctime”，在某些系统上是最新的元数据更改的时间，在其它系统上是创建时间，详细信息参见平台文档\r\n\r\n\r\n\r\n","prefix":"uos.stat(path)"},"uos.statvfs(path)":{"body":"uos.statvfs(${1:path})","description":"获取文件系统状态信息。返回一个包含文件系统信息的元组：\r\n例子：\r\n* `f_bsize` – 文件系统块大小，单位字节\r\n* `f_frsize` – 分栈大小，单位字节\r\n* `f_blocks` – 文件系统数据块总数\r\n* `f_bfree` – 可用块数\r\n* `f_bavai` – 非超级用户可获取的块数\r\n* `f_files`  – 文件结点总数\r\n* `f_ffree` – 可用文件结点数\r\n* `f_favail` – 超级用户的可用文件结点数\r\n* `f_flag` – 挂载标记\r\n* `f_namemax` – 最大文件长度，单位字节\r\n\r\n示例：\r\n\r\n```\r\n>>> import uos\r\n>>> res = uos.statvfs(\"main.py\")\r\n>>> print(res)\r\n(4096, 4096, 256, 249, 249, 0, 0, 0, 0, 255)\r\n```\r\n\r\n\r\n\r\n","prefix":"uos.statvfs(path)"},"uos.uname()":{"body":"uos.uname()","description":"获取关于底层信息或其操作系统的信息。返回一个元组，形式为：\r\n例子：\r\n* `sysname` – 底层系统的名称，string类型\r\n\r\n* `nodename` – 网络名称(可以与 sysname 相同) ，string类型\r\n\r\n* `release` – 底层系统的版本，string类型\r\n\r\n* `version` – MicroPython版本和构建日期，string类型\r\n\r\n* `machine` – 底层硬件(如主板、CPU)的标识符，string类型\r\n\r\n示例：\r\n\r\n```\r\n>>> import uos\r\n>>> uos.uname()\r\n(sysname='EC100Y', nodename='EC100Y', release='1.12.0', version='v1.12 on 2020-06-23', machine='EC100Y with QUECTEL')\r\n```\r\n\r\n\r\n\r\n","prefix":"uos.uname()"},"uos.urandom(n)":{"body":"uos.urandom(${1:n})","description":"返回具有*n个*随机字节的bytes对象，只要有可能，它就会由硬件随机数生成器生成。\r\n例子：\r\n```\r\n>>> import uos\r\n>>> uos.urandom(5)\r\nb'\\xb3\\xc9Y\\x1b\\xe9'\r\n```\r\n\r\n\r\n\r\n#### gc - 内存碎片回收\r\n\r\ngc 模块实现内存垃圾回收机制，该模块实现了CPython模块相应模块的子集。更多信息请参阅阅CPython文档：[gc](https://docs.python.org/3.5/library/gc.html#module-gc)\r\n\r\n","prefix":"uos.urandom(n)"},"urandom.choice(obj)":{"body":"urandom.choice(${1:obj})","description":"随机生成对象 obj 中的元素，obj 类型 string。\r\n例子：\r\n```\r\n>>> import urandom\r\n>>> urandom.choice(\"QuecPython\")\r\n't'\r\n```\r\n\r\n\r\n\r\n","prefix":"urandom.choice(obj)"},"urandom.getrandbits(k)":{"body":"urandom.getrandbits(${1:k})","description":"随机产生一个k比特长的随机整数。\r\n例子：\r\n```\r\n>>> import urandom\r\n>>> urandom.getrandbits(1)  #1位二进制位，范围为0~1（十进制：0~1）\r\n1\r\n>>> urandom.getrandbits(1)\r\n0\r\n>>> urandom.getrandbits(8)  #8位二进制位，范围为0000 0000~1111 11111（十进制：0~255）\r\n224\r\n```\r\n\r\n\r\n\r\n","prefix":"urandom.getrandbits(k)"},"urandom.randint(start, end)":{"body":"urandom.randint (${1:start}),(${2: end})","description":"随机生成一个 start 到 end 之间的整数。\r\n例子：\r\n```\r\n>>> import urandom\r\n>>> urandom.randint(1, 4)\r\n4\r\n>>> urandom.randint(1, 4)\r\n2\r\n```\r\n\r\n\r\n\r\n","prefix":"urandom.randint(start, end)"},"urandom.random()":{"body":"urandom.random()","description":"随机生成一个 0 到 1 之间的浮点数。\r\n例子：\r\n```\r\n>>> import urandom\r\n>>> urandom.random()\r\n0.8465231\r\n```\r\n\r\n\r\n\r\n","prefix":"urandom.random()"},"urandom.randrange(start, end, step)":{"body":"urandom.randrange (${1:start}),(${2: end}),(${3: step})","description":"随机生成 start 到 end 间并且递增为 step 的正整数。\r\n例子：\r\n```\r\n>>> import urandom\r\n>>> urandom.randrange(0, 8, 2)\r\n0\r\n>>> urandom.randrange(0, 8, 2)\r\n6\r\n```\r\n\r\n\r\n\r\n","prefix":"urandom.randrange(start, end, step)"},"urandom.seed(sed)":{"body":"urandom.seed(${1:sed})","description":"指定随机数种子，通常和其它随机数生成函数搭配使用。\r\n例子：\r\n```\r\n>>> import urandom\r\n>>> urandom.seed(20)  #指定随机数种子\r\n>>> for i in range(0, 15): #生成0~15范围内的随机序列\r\n...     print(urandom.randint(1, 10))\r\n...     \r\n8\r\n10\r\n9\r\n10\r\n2\r\n1\r\n9\r\n3\r\n2\r\n2\r\n6\r\n1\r\n10\r\n9\r\n6\r\n```\r\n\r\n\r\n\r\n","prefix":"urandom.seed(sed)"},"urandom.uniform(start, end)":{"body":"urandom.uniform (${1:start}),(${2: end})","description":"随机生成 start 到 end 范围内的浮点数。\r\n例子：\r\n```\r\n>>> import urandom\r\n>>> urandom.uniform(3, 5)\r\n3.219261\r\n>>> urandom.uniform(3, 5)\r\n4.00403\r\n```\r\n\r\n\r\n\r\n#### math - 数学运算\r\n\r\nmath 模块提供数学运算函数。该模块实现相应CPython模块的子集。更多信息请参阅阅CPython文档：[math](https://docs.python.org/3.5/library/math.html#module-math)\r\n\r\n","prefix":"urandom.uniform(start, end)"},"usocket.getaddrinfo(host, port)":{"body":"usocket.getaddrinfo (${1:host}),(${2: port})","description":"将主机域名（host）和端口（port）转换为用于创建套接字的5元组序列，元组结构如下：\r\n例子：\r\n\r\n\r\n**socket类的方法**\r\n\r\n","prefix":"usocket.getaddrinfo(host, port)"},"usocket.socket(af=AF_INET, type=SOCK_STREAM, proto=IPPROTO_TCP)":{"body":"usocket.socket (${1:af=AF_INET}),(${2: type=SOCK_STREAM}),(${3: proto=IPPROTO_TCP})","description":"根据给定的地址族、套接字类型以及协议类型参数，创建一个新的套接字。注意，在大多数情况下不需要指定*proto*，也不建议这样做，因为某些MicroPython端口可能会省略 `IPPROTO_*`常量。\r\n例子：\r\naf - 地址族\r\n\r\n* usocket.AF_INET ：IPV4\r\n\r\n* usocket.AF_INET6 ：IPV6\r\n\r\ntype - socket类型\r\n\r\n* usocket.SOCK_STREAM ：对应TCP的流式套接字\r\n\r\n* usocket.SOCK_DGRAM ：对应UDP的数据包套接字\r\n\r\n* usocket.SOCK_RAW ：原始套接字\r\n\r\nproto - 协议号\r\n\r\n* usocket.IPPROTO_TCP\r\n\r\n* usocket.IPPROTO_UDP\r\n\r\n其他\r\n\r\n* usocket.SOL_SOCKET - 套接字选项级别，\r\n\r\n* usocket.SO_REUSEADDR - 允许绑定地址快速重用\r\n\r\n示例：\r\n\r\n```\r\nimport usocket\r\n# 创建基于TCP的流式套接字\r\nsocket = usocket.socket(usocket.AF_INET, usocket.SOCK_STREAM)\r\n# 创建基于UDP的数据报套接字\r\nsocket = usocket.socket(usocket.AF_INET, usocket.SOCK_DGRAM)\r\n```\r\n\r\n\r\n\r\n","prefix":"usocket.socket(af=AF_INET, type=SOCK_STREAM, proto=IPPROTO_TCP)"},"ustruct.calcsize(fmt)":{"body":"ustruct.calcsize(${1:fmt})","description":"返回存放 fmt 需要的字节数。\r\n例子：\r\n示例：\r\n\r\n```\r\n>>> import ustruct\r\n>>> ustruct.calcsize('i')\r\n4\r\n>>> ustruct.calcsize('f')\r\n4\r\n>>> ustruct.calcsize('d')\r\n8\r\n```\r\n\r\n\r\n\r\n","prefix":"ustruct.calcsize(fmt)"},"ustruct.pack(fmt, v1, v2, ...)":{"body":"ustruct.pack (${1:fmt}),(${2: v1}),(${3: v2}),(${4: ...})","description":"按照格式字符串 fmt 压缩参数v1、 v2、…返回值是参数编码后的字节对象。\r\n例子：\r\n\r\n\r\n","prefix":"ustruct.pack(fmt, v1, v2, ...)"},"ustruct.pack_info(fmt, buffer, offset, v1, v2, ...)":{"body":"ustruct.pack_info (${1:fmt}),(${2: buffer}),(${3: offset}),(${4: v1}),(${5: v2}),(${6: ...})","description":"根据格式字符串fmt将值v1、v2、 …打包到从`offset`开始的缓冲区中。从缓冲区的末尾算起，`offset`可能为负。\r\n例子：\r\n\r\n\r\n","prefix":"ustruct.pack_info(fmt, buffer, offset, v1, v2, ...)"},"utime.locatime([secs])":{"body":"utime.locatime(${1:[secs]})","description":"该函数用来将一个以秒表示的时间转换为一个元组，元组包含了了年、月、日、时、分、秒、星期、一年中第几天；如果没有给定参数sec，则使用RTC时间。返回值形式如下：\r\n例子：\r\n* `year` ：年份，int型\r\n\r\n* `month` ：月份，1~12，int型\r\n\r\n* `mday` ：日，当月多少号，1~31，int型\r\n\r\n* `hour` ：小时，0~23，int型\r\n\r\n* `minute` ：分钟，0~59，int型\r\n\r\n* `second` ：秒，0~59，int型\r\n\r\n* `weekday` ：星期，周一到周日是0~6，int型\r\n\r\n* `yearday` ：一年中的第多少天，int型\r\n\r\n示例：\r\n\r\n```\r\n>>> import utime\r\n>>> utime.localtime()\r\n(2020, 9, 29, 8, 54, 42, 1, 273)\r\n>>> utime.localtime(646898736)\r\n(2020, 7, 1, 6, 5, 36, 2, 183)\r\n```\r\n\r\n\r\n\r\n","prefix":"utime.locatime([secs])"},"utime.mktime(date)":{"body":"utime.mktime(${1:date})","description":"该函数作用与locatime()相反，它将一个存放在元组中的时间转换为以秒计的时间戳。\r\n例子：\r\n```\r\n>>> import utime\r\n>>> date = (2020, 9, 29, 8, 54, 42, 1, 273)\r\n>>> utime.mktime(date)\r\n1601340882\r\n```\r\n\r\n\r\n\r\n","prefix":"utime.mktime(date)"},"utime.sleep(seconds)":{"body":"utime.sleep(${1:seconds})","description":"休眠给定秒数的时间。\r\n例子：\r\n\r\n\r\n","prefix":"utime.sleep(seconds)"},"utime.sleep_ms(ms)":{"body":"utime.sleep_ms(${1:ms})","description":"休眠给定毫秒数的时间。\r\n例子：\r\n\r\n\r\n","prefix":"utime.sleep_ms(ms)"},"utime.sleep_us(us)":{"body":"utime.sleep_us(${1:us})","description":"休眠给定微秒的时间。\r\n例子：\r\n\r\n\r\n","prefix":"utime.sleep_us(us)"},"utime.ticks_cpu()":{"body":"utime.ticks_cpu()","description":"和 ticks_ms/ticks_us 类似，具有更高精度 (使用 CPU 时钟)。\r\n例子：\r\n","prefix":"utime.ticks_cpu()"},"utime.ticks_diff(old, new)":{"body":"utime.ticks_diff (${1:old}),(${2: new})","description":"计算两次调用` ticks_ms()`， `ticks_us()`，或 `ticks_cpu()`之间的时间。因为这些函数的计数值可能会回绕，所以不能直接相减，需要使用 ticks_diff() 函数。“旧” 时间需要在 “新” 时间之前，否则结果无法确定。这个函数不要用在计算很长的时间 (因为 ticks_*() 函数会回绕，通常周期不是很长)。通常用法是在带超时的轮询事件中调用。\r\n例子：\r\n```\r\nimport utime\r\nstart = utime.ticks_us()\r\nwhile pin.value() == 0:\r\n    if utime.ticks_diff(time.ticks_us(), start) > 500:\r\n        raise TimeoutError\r\n```\r\n\r\n\r\n\r\n","prefix":"utime.ticks_diff(old, new)"},"utime.ticks_ms()":{"body":"utime.ticks_ms()","description":"返回不断递增的毫秒计数器，在某些值后会重新计数(未指定)。计数值本身无特定意义，只适合用在 `ticks_diff()`函数中。\r\n例子：\r\n\r\n\r\n","prefix":"utime.ticks_ms()"},"utime.ticks_us()":{"body":"utime.ticks_us()","description":"和`ticks_ms()`类似，只是返回微秒计数器。\r\n例子：\r\n","prefix":"utime.ticks_us()"},"utime.time()":{"body":"utime.time()","description":"返回自纪元以来的秒数（以整数形式）。如果未设置RTC，则此函数返回自特定于端口的参考时间点以来的秒数（对于不具有电池后备RTC的嵌入式板，通常是由于加电或复位）。如果要开发可移植的MicroPython应用程序，则不应依赖此功能提供高于秒的精度。如果需要更高的精度，请使用 `ticks_ms()`和`ticks_us()`函数，如果需要日历时间，则 `localtime()`不带参数会更好。\r\n例子：\r\n#### sys - 系统相关功能\r\n\r\nsys 模块中提供了与QuecPython运行环境有关的函数和变量。该模块实现相应CPython模块的子集。更多信息请参阅阅CPython文档：[sys](https://docs.python.org/3.5/library/sys.html#module-sys)\r\n\r\n**常数说明**\r\n\r\n","prefix":"utime.time()"},"uzlib.decompress(data, wbits=0, bufsize=0)":{"body":"uzlib.decompress (${1:data}),(${2: wbits=0}),(${3: bufsize=0})","description":"返回解压后的 bytes 对象。`wbits`是解压时使用的DEFLATE字典窗口大小（8-15，字典大小是`wbits`值的2的幂）。如果该值为正，则假定`data`为zlib流（带有zlib标头），如果为负，则假定为原始的DEFLATE流。`bufsize`参数是为了与CPython兼容，将被忽略。\r\n例子：\r\n","prefix":"uzlib.decompress(data, wbits=0, bufsize=0)"}}