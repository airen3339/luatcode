{"aLiPay.close(cbFnc)":{"body":"aLiPay.close(cbFnc)","description":"关闭aLiPay（注意：关闭aLiPay之后，只能重启才能再次自动开启）","prefix":"aLiPay.close(cbFnc)"},"aLiPay.getBiztid()":{"body":"aLiPay.getBiztid()","description":"获取设备的biztid(注意，必须在connectCb之后才能获取成功)","prefix":"aLiPay.getBiztid()"},"aLiPay.on(evt, cbFnc)":{"body":"aLiPay.on(evt, cbFnc)","description":"注册事件的处理函数","prefix":"aLiPay.on(evt, cbFnc)"},"aLiPay.sendActData(broadcastCnt, scanCnt, cbFnc)":{"body":"aLiPay.sendActData(broadcastCnt, scanCnt, cbFnc)","description":"缓存行为数据（注意：缓存成功后，并不是立即上报，而是缓存到一定条数之后才会上报）","prefix":"aLiPay.sendActData(broadcastCnt, scanCnt, cbFnc)"},"aLiPay.sendProductInfoData(humanVerify, cbFnc)":{"body":"aLiPay.sendProductInfoData(humanVerify, cbFnc)","description":"缓存产品规格信息数据（注意：缓存成功后，并不是立即上报，而是缓存到一定条数之后才会上报）","prefix":"aLiPay.sendProductInfoData(humanVerify, cbFnc)"},"aLiPay.sendTransactionData(businessNo, qrcode, amount, timeConsuming, tradeResult, cbFnc)":{"body":"aLiPay.sendTransactionData(businessNo, qrcode, amount, timeConsuming, tradeResult, cbFnc)","description":"缓存交易信息数据（注意：缓存成功后，并不是立即上报，而是缓存到一定条数之后才会上报）","prefix":"aLiPay.sendTransactionData(businessNo, qrcode, amount, timeConsuming, tradeResult, cbFnc)"},"aLiPay.setup(deviceSupplier, merchantUser, itemId, productKey, getTerminalIdFnc)":{"body":"aLiPay.setup(deviceSupplier, merchantUser, itemId, productKey, getTerminalIdFnc)","description":"配置支付宝产品参数","prefix":"aLiPay.setup(deviceSupplier, merchantUser, itemId, productKey, getTerminalIdFnc)"},"aLiPay.sign(mode, data, amount, cbFnc)":{"body":"aLiPay.sign(mode, data, amount, cbFnc)","description":"对待交易数据进行加签","prefix":"aLiPay.sign(mode, data, amount, cbFnc)"},"aLiYun.on(evt, cbFnc)":{"body":"aLiYun.on(evt, cbFnc)","description":"注册事件的处理函数","prefix":"aLiYun.on(evt, cbFnc)"},"aLiYun.publish(topic, payload, qos, cbFnc, cbPara)":{"body":"aLiYun.publish(topic, payload, qos, cbFnc, cbPara)","description":"发布一条消息","prefix":"aLiYun.publish(topic, payload, qos, cbFnc, cbPara)"},"aLiYun.setErrHandle(cbFnc, tmout)":{"body":"aLiYun.setErrHandle(cbFnc, tmout)","description":"设置阿里云task连续一段时间工作异常的处理程序","prefix":"aLiYun.setErrHandle(cbFnc, tmout)"},"aLiYun.setMqtt(cleanSession, will, keepAlive)":{"body":"aLiYun.setMqtt(cleanSession, will, keepAlive)","description":"设置MQTT数据通道的参数","prefix":"aLiYun.setMqtt(cleanSession, will, keepAlive)"},"aLiYun.setup(productKey, productSecret, getDeviceNameFnc, getDeviceSecretFnc, setDeviceSecretFnc)":{"body":"aLiYun.setup(productKey, productSecret, getDeviceNameFnc, getDeviceSecretFnc, setDeviceSecretFnc)","description":"配置阿里云物联网套件的产品信息和设备信息","prefix":"aLiYun.setup(productKey, productSecret, getDeviceNameFnc, getDeviceSecretFnc, setDeviceSecretFnc)"},"aLiYun.sleep()":{"body":"aLiYun.sleep()","description":"断开阿里云物联网套件的连接，并且不再重连","prefix":"aLiYun.sleep()"},"aLiYun.sleepStatus()":{"body":"aLiYun.sleepStatus()","description":"查看打开阿里云物联网套件的是否允许连接状态","prefix":"aLiYun.sleepStatus()"},"aLiYun.subscribe(topic, qos)":{"body":"aLiYun.subscribe(topic, qos)","description":"订阅主题","prefix":"aLiYun.subscribe(topic, qos)"},"aLiYun.wakeup()":{"body":"aLiYun.wakeup()","description":"重新打开阿里云物联网套件的连接","prefix":"aLiYun.wakeup()"},"aLiYunOta.setCb(cbFnc)":{"body":"aLiYunOta.setCb(cbFnc)","description":"设置新固件下载后的回调函数","prefix":"aLiYunOta.setCb(cbFnc)"},"aLiYunOta.setName(name)":{"body":"aLiYunOta.setName(name)","description":"设置新固件保存的文件名","prefix":"aLiYunOta.setName(name)"},"aLiYunOta.setVer(version)":{"body":"aLiYunOta.setVer(version)","description":"设置当前的固件版本号","prefix":"aLiYunOta.setVer(version)"},"adc.colse()":{"body":"adc.colse()","description":"关闭adc","prefix":"adc.colse()"},"adc.open()":{"body":"adc.open()","description":"打开对应ID的ADC通道","prefix":"adc.open()"},"adc.read()":{"body":"adc.read()","description":"读取原始测量数据和电压值，电压值单位为mv","prefix":"adc.read()"},"apn.get_default_apn()":{"body":"apn.get_default_apn()","description":"通过mcc和mnc获取到默认apn","prefix":"apn.get_default_apn()"},"audio.play(priority, type, path, vol, cbFnc, dup, dupInterval)":{"body":"audio.play(priority, type, path, vol, cbFnc, dup, dupInterval)","description":"播放音频","prefix":"audio.play(priority, type, path, vol, cbFnc, dup, dupInterval)"},"audio.setMicVolume(vol)":{"body":"audio.setMicVolume(vol)","description":"设置麦克音量等级","prefix":"audio.setMicVolume(vol)"},"audio.setStrategy(strategy)":{"body":"audio.setStrategy(strategy)","description":"设置优先级相同时的播放策略","prefix":"audio.setStrategy(strategy)"},"audio.setVolume(vol)":{"body":"audio.setVolume(vol)","description":"设置喇叭音量等级","prefix":"audio.setVolume(vol)"},"audio.stop(cbFnc)":{"body":"audio.stop(cbFnc)","description":"停止音频播放","prefix":"audio.stop(cbFnc)"},"audiocore.play()":{"body":"audiocore.play()","description":"播放音乐","prefix":"audiocore.play()"},"audiocore.setchannel()":{"body":"audiocore.setchannel()","description":"设置音频播放通道","prefix":"audiocore.setchannel()"},"audiocore.setloopback()":{"body":"audiocore.setloopback()","description":"设置通道指定的环回测试","prefix":"audiocore.setloopback()"},"audiocore.setmicvol()":{"body":"audiocore.setmicvol()","description":"设置麦克风音量","prefix":"audiocore.setmicvol()"},"audiocore.setvol()":{"body":"audiocore.setvol()","description":"设置音频播放音量大小","prefix":"audiocore.setvol()"},"audiocore.stop()":{"body":"audiocore.stop()","description":"停掉正在播放的音频","prefix":"audiocore.stop()"},"bit.arshift()":{"body":"bit.arshift()","description":"算数右移","prefix":"bit.arshift()"},"bit.band()":{"body":"bit.band()","description":"与运算，等价于Ｃ语言中的val1 & val2 & ... & valn","prefix":"bit.band()"},"bit.bit()":{"body":"bit.bit()","description":"左移运算，等价于C语言中的1 << position","prefix":"bit.bit()"},"bit.bnot()":{"body":"bit.bnot()","description":"取反，等价于C语言中的~","prefix":"bit.bnot()"},"bit.bor()":{"body":"bit.bor()","description":"或运算，等价于C里面的val1 | val2 | ... | valn","prefix":"bit.bor()"},"bit.bxor()":{"body":"bit.bxor()","description":"异或运算，等价于C语言中的val1 ^ val2 ^ ... ^ valn","prefix":"bit.bxor()"},"bit.clear()":{"body":"bit.clear()","description":"置0","prefix":"bit.clear()"},"bit.isclear()":{"body":"bit.isclear()","description":"测试位数是否被置0","prefix":"bit.isclear()"},"bit.isset()":{"body":"bit.isset()","description":"测试位数是否被置1","prefix":"bit.isset()"},"bit.lshift()":{"body":"bit.lshift()","description":"逻辑左移，等价于C语言中的value << shift","prefix":"bit.lshift()"},"bit.rshift()":{"body":"bit.rshift()","description":"逻辑右移，等价于C语言中的value >> shift","prefix":"bit.rshift()"},"bit.set()":{"body":"bit.set()","description":"置1","prefix":"bit.set()"},"cc.accept(num)":{"body":"cc.accept(num)","description":"接听电话","prefix":"cc.accept(num)"},"cc.anyCallExist()":{"body":"cc.anyCallExist()","description":"是否存在通话","prefix":"cc.anyCallExist()"},"cc.dial(num, delay)":{"body":"cc.dial(num, delay)","description":"呼出电话","prefix":"cc.dial(num, delay)"},"cc.dtmfDetect(enable, sens)":{"body":"cc.dtmfDetect(enable, sens)","description":"设置dtmf检测是否使能以及灵敏度","prefix":"cc.dtmfDetect(enable, sens)"},"cc.getState(num)":{"body":"cc.getState(num)","description":"查询某个号码的通话状态","prefix":"cc.getState(num)"},"cc.hangUp(num)":{"body":"cc.hangUp(num)","description":"挂断通话","prefix":"cc.hangUp(num)"},"cc.sendDtmf(str, playtime, intvl)":{"body":"cc.sendDtmf(str, playtime, intvl)","description":"发送dtmf到对端","prefix":"cc.sendDtmf(str, playtime, intvl)"},"cc.transVoice(data, loop, downLinkPlay)":{"body":"cc.transVoice(data, loop, downLinkPlay)","description":"通话中发送声音到对端,必须是12.2K AMR格式","prefix":"cc.transVoice(data, loop, downLinkPlay)"},"common.bcdNumToNum(num)":{"body":"common.bcdNumToNum(num)","description":"BCD编码格式字符串 转化为 号码ASCII字符串(仅支持数字)","prefix":"common.bcdNumToNum(num)"},"common.gb2312ToUcs2(gb2312s)":{"body":"common.gb2312ToUcs2(gb2312s)","description":"gb2312编码 转化为 unicode小端编码","prefix":"common.gb2312ToUcs2(gb2312s)"},"common.gb2312ToUcs2be(gb2312s)":{"body":"common.gb2312ToUcs2be(gb2312s)","description":"gb2312编码 转化为 unicode大端编码","prefix":"common.gb2312ToUcs2be(gb2312s)"},"common.gb2312ToUtf8(gb2312s)":{"body":"common.gb2312ToUtf8(gb2312s)","description":"gb2312编码 转化为 utf8编码","prefix":"common.gb2312ToUtf8(gb2312s)"},"common.nstrToUcs2Hex(inNum)":{"body":"common.nstrToUcs2Hex(inNum)","description":"ascii字符串 转化为 ascii字符串的unicode编码的16进制字符串(仅支持数字和+)","prefix":"common.nstrToUcs2Hex(inNum)"},"common.numToBcdNum(inStr, destLen)":{"body":"common.numToBcdNum(inStr, destLen)","description":"ASCII字符串 转化为 BCD编码格式字符串(仅支持数字)","prefix":"common.numToBcdNum(inStr, destLen)"},"common.timeZoneConvert(y, m, d, hh, mm, ss, srcTimeZone, dstTimeZone)":{"body":"common.timeZoneConvert(y, m, d, hh, mm, ss, srcTimeZone, dstTimeZone)","description":"时区时间转换","prefix":"common.timeZoneConvert(y, m, d, hh, mm, ss, srcTimeZone, dstTimeZone)"},"common.ucs2ToAscii(inNum)":{"body":"common.ucs2ToAscii(inNum)","description":"ascii字符串的unicode编码的16进制字符串 转化为 ascii字符串","prefix":"common.ucs2ToAscii(inNum)"},"common.ucs2ToGb2312(ucs2s)":{"body":"common.ucs2ToGb2312(ucs2s)","description":"unicode小端编码 转化为 gb2312编码","prefix":"common.ucs2ToGb2312(ucs2s)"},"common.ucs2ToUtf8(ucs2s)":{"body":"common.ucs2ToUtf8(ucs2s)","description":"unicode小端编码 转化为 utf8编码","prefix":"common.ucs2ToUtf8(ucs2s)"},"common.ucs2beToGb2312(ucs2s)":{"body":"common.ucs2beToGb2312(ucs2s)","description":"unicode大端编码 转化为 gb2312编码","prefix":"common.ucs2beToGb2312(ucs2s)"},"common.ucs2beToUtf8(ucs2s)":{"body":"common.ucs2beToUtf8(ucs2s)","description":"unicode大端编码 转化为 utf8编码","prefix":"common.ucs2beToUtf8(ucs2s)"},"common.utf8ToGb2312(utf8s)":{"body":"common.utf8ToGb2312(utf8s)","description":"utf8编码 转化为 gb2312编码","prefix":"common.utf8ToGb2312(utf8s)"},"common.utf8ToUcs2(utf8s)":{"body":"common.utf8ToUcs2(utf8s)","description":"utf8编码 转化为 unicode小端编码","prefix":"common.utf8ToUcs2(utf8s)"},"common.utf8ToUcs2be(utf8s)":{"body":"common.utf8ToUcs2be(utf8s)","description":"utf8编码 转化为 unicode大端编码","prefix":"common.utf8ToUcs2be(utf8s)"},"console.setup(id, baudrate)":{"body":"console.setup(id, baudrate)","description":"配置控制台使用的串口参数，创建控制台协程","prefix":"console.setup(id, baudrate)"},"crypto.aes_encrypt()":{"body":"crypto.aes_encrypt()","description":"aes算法（参考http://tool.chacuo.net/cryptaes）","prefix":"crypto.aes_encrypt()"},"crypto.base64_decode()":{"body":"crypto.base64_decode()","description":"base64解密","prefix":"crypto.base64_decode()"},"crypto.base64_encode()":{"body":"crypto.base64_encode()","description":"base64加密","prefix":"crypto.base64_encode()"},"crypto.crc16()":{"body":"crypto.crc16()","description":"CRC16校验算法","prefix":"crypto.crc16()"},"crypto.crc32()":{"body":"crypto.crc32()","description":"CRC32校验算法","prefix":"crypto.crc32()"},"crypto.flow_md5()":{"body":"crypto.flow_md5()","description":"流式md5算法","prefix":"crypto.flow_md5()"},"crypto.hmac_md5()":{"body":"crypto.hmac_md5()","description":"hmac_md5算法测试","prefix":"crypto.hmac_md5()"},"crypto.hmac_sha1()":{"body":"crypto.hmac_sha1()","description":"hmac_sha1算法","prefix":"crypto.hmac_sha1()"},"crypto.md5()":{"body":"crypto.md5()","description":"md5算法，支持计算文件的md5值","prefix":"crypto.md5()"},"crypto.sha1()":{"body":"crypto.sha1()","description":"sha1算法","prefix":"crypto.sha1()"},"crypto.sha256()":{"body":"crypto.sha256()","description":"sha256算法","prefix":"crypto.sha256()"},"crypto.xxtea_encrypt()":{"body":"crypto.xxtea_encrypt()","description":"xxtea加密算法","prefix":"crypto.xxtea_encrypt()"},"disp.clear()":{"body":"disp.clear()","description":"清除缓冲区内容，注意不会刷新到屏幕上，只有在update时才会执行刷屏动作","prefix":"disp.clear()"},"disp.drawrect()":{"body":"disp.drawrect()","description":"绘制矩形，并且填充颜色。填充色可以自行设置也可不填充颜色值格式RGB565。","prefix":"disp.drawrect()"},"disp.getlcdinfo()":{"body":"disp.getlcdinfo()","description":"获取LCD分辨率的宽度和高度(单位是像素)","prefix":"disp.getlcdinfo()"},"disp.init()":{"body":"disp.init()","description":"初始化显示接口语法","prefix":"disp.init()"},"disp.loadfont()":{"body":"disp.loadfont()","description":"加载字体","prefix":"disp.loadfont()"},"disp.putimage()":{"body":"disp.putimage()","description":"在坐标(x,y)处显示图片，目前仅支持bmp和png格式，这个接口只会将显示数据写到缓冲区，只有在执行了update了以后才会真正的刷屏。最后面的四个参数是规定了从file中截取某一部分区域","prefix":"disp.putimage()"},"disp.putqrcode()":{"body":"disp.putqrcode()","description":"显示二维码","prefix":"disp.putqrcode()"},"disp.puttext()":{"body":"disp.puttext()","description":"显示字符串","prefix":"disp.puttext()"},"disp.setbkcolor()":{"body":"disp.setbkcolor()","description":"设置背景色","prefix":"disp.setbkcolor()"},"disp.setcolor()":{"body":"disp.setcolor()","description":"设置前景色","prefix":"disp.setcolor()"},"disp.setfont()":{"body":"disp.setfont()","description":"设置字体","prefix":"disp.setfont()"},"disp.sleep()":{"body":"disp.sleep()","description":"休眠显示模块","prefix":"disp.sleep()"},"disp.update()":{"body":"disp.update()","description":"将缓冲区内容刷新到屏幕上","prefix":"disp.update()"},"errDump.appendErr(s)":{"body":"errDump.appendErr(s)","description":"追加错误信息到LIB_ERR_FILE文件中（文件最多允许存储5K字节的数据）","prefix":"errDump.appendErr(s)"},"errDump.request(addr, period)":{"body":"errDump.request(addr, period)","description":"配置调试服务器地址，启动错误信息上报给调试服务器的功能，上报成功后，会清除错误信息","prefix":"errDump.request(addr, period)"},"errDump.setNetworkLog(flag)":{"body":"errDump.setNetworkLog(flag)","description":"配置网络错误日志开关","prefix":"errDump.setNetworkLog(flag)"},"file:close()":{"body":"file:close()","description":"关闭文件句柄","prefix":"file:close()"},"file:flush()":{"body":"file:flush()","description":"向文件写入缓冲中的所有数据","prefix":"file:flush()"},"file:read()":{"body":"file:read()","description":"读文件file， 指定的格式决定了要读什么。","prefix":"file:read()"},"file:seek()":{"body":"file:seek()","description":"设置和获取当前文件位置。","prefix":"file:seek()"},"file:write ()":{"body":"file:write ()","description":"将参数的值逐个写入file。","prefix":"file:write ()"},"gizwits.checkUpdate(hard_version, soft_version)":{"body":"gizwits.checkUpdate(hard_version, soft_version)","description":"手动检查更新","prefix":"gizwits.checkUpdate(hard_version, soft_version)"},"gizwits.on(evt, cbFnc)":{"body":"gizwits.on(evt, cbFnc)","description":"注册事件的处理函数","prefix":"gizwits.on(evt, cbFnc)"},"gizwits.publish(topic, payload, qos, cbFnc, cbPara)":{"body":"gizwits.publish(topic, payload, qos, cbFnc, cbPara)","description":"发布一条消息","prefix":"gizwits.publish(topic, payload, qos, cbFnc, cbPara)"},"gizwits.setup(PRODUCT_KEY, PRODUCT_SECRET, getDeviceName, getDeviceSecret, getDeviceId, setDeviceId, getAuthKey, m2mHT, extra, server, port)":{"body":"gizwits.setup(PRODUCT_KEY, PRODUCT_SECRET, getDeviceName, getDeviceSecret, getDeviceId, setDeviceId, getAuthKey, m2mHT, extra, server, port)","description":"初始化机智云注册所需要的数据","prefix":"gizwits.setup(PRODUCT_KEY, PRODUCT_SECRET, getDeviceName, getDeviceSecret, getDeviceId, setDeviceId, getAuthKey, m2mHT, extra, server, port)"},"gizwits.transmissionSend(flag, ccmd, sn, cmd, topic)":{"body":"gizwits.transmissionSend(flag, ccmd, sn, cmd, topic)","description":"发布一条透传消息","prefix":"gizwits.transmissionSend(flag, ccmd, sn, cmd, topic)"},"gps.DEFAULT":{"body":"gps.DEFAULT","description":"常量值，GPS应用模式1.","prefix":"gps.DEFAULT"},"gps.TIMER":{"body":"gps.TIMER","description":"常量值，GPS应用模式3.","prefix":"gps.TIMER"},"gps.TIMERORSUC":{"body":"gps.TIMERORSUC","description":"常量值，GPS应用模式2.","prefix":"gps.TIMERORSUC"},"gps.close(mode, para)":{"body":"gps.close(mode, para)","description":"关闭一个“GPS应用”","prefix":"gps.close(mode, para)"},"gps.closeAll()":{"body":"gps.closeAll()","description":"关闭所有“GPS应用”","prefix":"gps.closeAll()"},"gps.getAltitude()":{"body":"gps.getAltitude()","description":"获取海拔","prefix":"gps.getAltitude()"},"gps.getCourse()":{"body":"gps.getCourse()","description":"获取方向角","prefix":"gps.getCourse()"},"gps.getGgaloc()":{"body":"gps.getGgaloc()","description":"获取GGA语句中度分格式的经纬度信息","prefix":"gps.getGgaloc()"},"gps.getGsv()":{"body":"gps.getGsv()","description":"获取GSV语句中的可见卫星的信噪比","prefix":"gps.getGsv()"},"gps.getLocation(typ)":{"body":"gps.getLocation(typ)","description":"获取度格式的经纬度信息","prefix":"gps.getLocation(typ)"},"gps.getOrgSpeed()":{"body":"gps.getOrgSpeed()","description":"获取原始速度,字符串带浮点","prefix":"gps.getOrgSpeed()"},"gps.getSateSn()":{"body":"gps.getSateSn()","description":"获取GSA语句中的可见卫星号","prefix":"gps.getSateSn()"},"gps.getSep()":{"body":"gps.getSep()","description":"获取定位使用的大地高","prefix":"gps.getSep()"},"gps.getSpeed()":{"body":"gps.getSpeed()","description":"获取速度","prefix":"gps.getSpeed()"},"gps.getUsedSateCnt()":{"body":"gps.getUsedSateCnt()","description":"获取定位使用的卫星个数","prefix":"gps.getUsedSateCnt()"},"gps.getUtcTime()":{"body":"gps.getUtcTime()","description":"获取RMC语句中的UTC时间","prefix":"gps.getUtcTime()"},"gps.getViewedSateCnt()":{"body":"gps.getViewedSateCnt()","description":"获取可见卫星的个数","prefix":"gps.getViewedSateCnt()"},"gps.isActive(mode, para)":{"body":"gps.isActive(mode, para)","description":"判断一个“GPS应用”是否处于激活状态","prefix":"gps.isActive(mode, para)"},"gps.isFix()":{"body":"gps.isFix()","description":"获取GPS模块是否定位成功","prefix":"gps.isFix()"},"gps.isOpen()":{"body":"gps.isOpen()","description":"获取GPS模块是否处于开启状态","prefix":"gps.isOpen()"},"gps.open(mode, para)":{"body":"gps.open(mode, para)","description":"打开一个“GPS应用”","prefix":"gps.open(mode, para)"},"gps.setAerialMode(gps, beidou, glonass, galieo)":{"body":"gps.setAerialMode(gps, beidou, glonass, galieo)","description":"设置GPS模块搜星模式.","prefix":"gps.setAerialMode(gps, beidou, glonass, galieo)"},"gps.setLocationFilter(seconds)":{"body":"gps.setLocationFilter(seconds)","description":"设置GPS定位成功后经纬度的过滤时间.","prefix":"gps.setLocationFilter(seconds)"},"gps.setNemaReportFreq(rmc, gga, gsa, gsv, vtg, gll)":{"body":"gps.setNemaReportFreq(rmc, gga, gsa, gsv, vtg, gll)","description":"设置NEMA语句的输出频率.","prefix":"gps.setNemaReportFreq(rmc, gga, gsa, gsv, vtg, gll)"},"gps.setNmeaMode(mode, cbFnc)":{"body":"gps.setNmeaMode(mode, cbFnc)","description":"设置NMEA数据处理模式.","prefix":"gps.setNmeaMode(mode, cbFnc)"},"gps.setParseItem(utcTime, gsv, gsaId)":{"body":"gps.setParseItem(utcTime, gsv, gsaId)","description":"设置是否需要解析的字段","prefix":"gps.setParseItem(utcTime, gsv, gsaId)"},"gps.setPowerCbFnc(cbFnc)":{"body":"gps.setPowerCbFnc(cbFnc)","description":"设置GPS模块供电控制的回调函数","prefix":"gps.setPowerCbFnc(cbFnc)"},"gps.setRunMode(mode, runTm, sleepTm)":{"body":"gps.setRunMode(mode, runTm, sleepTm)","description":"设置GPS模块的运行模式.","prefix":"gps.setRunMode(mode, runTm, sleepTm)"},"gps.setUart(id, baudrate, databits, parity, stopbits)":{"body":"gps.setUart(id, baudrate, databits, parity, stopbits)","description":"设置GPS模块和GSM模块之间数据通信的串口参数","prefix":"gps.setUart(id, baudrate, databits, parity, stopbits)"},"gps.writeCmd(cmd, isFull)":{"body":"gps.writeCmd(cmd, isFull)","description":"GPS串口写命令操作","prefix":"gps.writeCmd(cmd, isFull)"},"gpsv2.close(id, fnc)":{"body":"gpsv2.close(id, fnc)","description":"关闭GPS模块","prefix":"gpsv2.close(id, fnc)"},"gpsv2.getAltitude()":{"body":"gpsv2.getAltitude()","description":"获取海拔","prefix":"gpsv2.getAltitude()"},"gpsv2.getAzimuth()":{"body":"gpsv2.getAzimuth()","description":"获取方向角","prefix":"gpsv2.getAzimuth()"},"gpsv2.getBDGsv()":{"body":"gpsv2.getBDGsv()","description":"获取BDGSV解析结果","prefix":"gpsv2.getBDGsv()"},"gpsv2.getCentLocation()":{"body":"gpsv2.getCentLocation()","description":"获取度分格式的经纬度信息ddmm.mmmm","prefix":"gpsv2.getCentLocation()"},"gpsv2.getDegLocation()":{"body":"gpsv2.getDegLocation()","description":"获取度格式的经纬度信息dd.dddddd","prefix":"gpsv2.getDegLocation()"},"gpsv2.getGPGsv()":{"body":"gpsv2.getGPGsv()","description":"获取GPGSV解析结果","prefix":"gpsv2.getGPGsv()"},"gpsv2.getIntLocation()":{"body":"gpsv2.getIntLocation()","description":"获取返回值为度的10&7方的整数值（度*10^7的值）","prefix":"gpsv2.getIntLocation()"},"gpsv2.getSateSn()":{"body":"gpsv2.getSateSn()","description":"获取GSA语句中的可见卫星号","prefix":"gpsv2.getSateSn()"},"gpsv2.getSep()":{"body":"gpsv2.getSep()","description":"获取定位使用的大地高","prefix":"gpsv2.getSep()"},"gpsv2.getSpeed()":{"body":"gpsv2.getSpeed()","description":"获取速度","prefix":"gpsv2.getSpeed()"},"gpsv2.getUsedSateCnt()":{"body":"gpsv2.getUsedSateCnt()","description":"获取定位使用的卫星个数","prefix":"gpsv2.getUsedSateCnt()"},"gpsv2.getUtcTime()":{"body":"gpsv2.getUtcTime()","description":"获取RMC语句中的UTC时间","prefix":"gpsv2.getUtcTime()"},"gpsv2.getViewedSateCnt()":{"body":"gpsv2.getViewedSateCnt()","description":"获取可见卫星的个数","prefix":"gpsv2.getViewedSateCnt()"},"gpsv2.isFix()":{"body":"gpsv2.isFix()","description":"获取GPS模块是否定位成功","prefix":"gpsv2.isFix()"},"gpsv2.isOpen()":{"body":"gpsv2.isOpen()","description":"获取GPS模块是否处于开启状态","prefix":"gpsv2.isOpen()"},"gpsv2.open(id, baudrate, mode, sleepTm, fnc)":{"body":"gpsv2.open(id, baudrate, mode, sleepTm, fnc)","description":"打开GPS模块","prefix":"gpsv2.open(id, baudrate, mode, sleepTm, fnc)"},"gpsv2.restart(r)":{"body":"gpsv2.restart(r)","description":"重启GPS模块","prefix":"gpsv2.restart(r)"},"gpsv2.setAerialMode(gps, beidou, glonass, galieo)":{"body":"gpsv2.setAerialMode(gps, beidou, glonass, galieo)","description":"设置GPS模块搜星模式.","prefix":"gpsv2.setAerialMode(gps, beidou, glonass, galieo)"},"gpsv2.setReport(tm)":{"body":"gpsv2.setReport(tm)","description":"设置NMEA消息上报的间隔","prefix":"gpsv2.setReport(tm)"},"gpsv2.setRunMode(mode, runTm, sleepTm)":{"body":"gpsv2.setRunMode(mode, runTm, sleepTm)","description":"设置GPS模块的运行模式.","prefix":"gpsv2.setRunMode(mode, runTm, sleepTm)"},"http.request(method, url, cert, head, body, timeout, cbFnc, rcvFileName)":{"body":"http.request(method, url, cert, head, body, timeout, cbFnc, rcvFileName)","description":"发送HTTP请求","prefix":"http.request(method, url, cert, head, body, timeout, cbFnc, rcvFileName)"},"httpv2.request(method, url, timeout, params, data, ctype, basic, headers, cert, fnc)":{"body":"httpv2.request(method, url, timeout, params, data, ctype, basic, headers, cert, fnc)","description":"HTTP客户端","prefix":"httpv2.request(method, url, timeout, params, data, ctype, basic, headers, cert, fnc)"},"i2c.close()":{"body":"i2c.close()","description":"关闭 I2C 接口","prefix":"i2c.close()"},"i2c.read()":{"body":"i2c.read()","description":"读取指定寄存器地址 reg 的数据内容","prefix":"i2c.read()"},"i2c.recv()":{"body":"i2c.recv()","description":"向从设备读取数据","prefix":"i2c.recv()"},"i2c.send()":{"body":"i2c.send()","description":"向从设备写数据","prefix":"i2c.send()"},"i2c.setup()":{"body":"i2c.setup()","description":"打开i2c接口","prefix":"i2c.setup()"},"i2c.write()":{"body":"i2c.write()","description":"往指定的寄存器地址 reg 传输数据","prefix":"i2c.write()"},"io.exists(path)":{"body":"io.exists(path)","description":"判断文件是否存在","prefix":"io.exists(path)"},"io.fileSize(path)":{"body":"io.fileSize(path)","description":"返回文件大小","prefix":"io.fileSize(path)"},"io.open()":{"body":"io.open()","description":"这个函数用字符串mode 指定的模式打开一个文件。","prefix":"io.open()"},"io.pathInfo(path)":{"body":"io.pathInfo(path)","description":"将文件路径分解为table信息","prefix":"io.pathInfo(path)"},"io.readFile(path)":{"body":"io.readFile(path)","description":"读取文件并返回文件的内容","prefix":"io.readFile(path)"},"io.readStream(path, offset, len)":{"body":"io.readStream(path, offset, len)","description":"返回指定位置读取的字符串","prefix":"io.readStream(path, offset, len)"},"io.writeFile(path, content, mode)":{"body":"io.writeFile(path, content, mode)","description":"写入文件指定的内容,默认为覆盖二进制模式","prefix":"io.writeFile(path, content, mode)"},"json.decode()":{"body":"json.decode()","description":"json解析","prefix":"json.decode()"},"json.encode()":{"body":"json.encode()","description":"json编译","prefix":"json.encode()"},"lbsLoc.request(cbFnc, reqAddr, timeout, productKey, host, port, reqTime, reqWifi)":{"body":"lbsLoc.request(cbFnc, reqAddr, timeout, productKey, host, port, reqTime, reqWifi)","description":"发送根据基站查询经纬度请求（仅支持中国区域的位置查询）","prefix":"lbsLoc.request(cbFnc, reqAddr, timeout, productKey, host, port, reqTime, reqWifi)"},"led.blinkPwm(ledPin, light, dark)":{"body":"led.blinkPwm(ledPin, light, dark)","description":"闪烁指示灯","prefix":"led.blinkPwm(ledPin, light, dark)"},"led.breateLed(ledPin)":{"body":"led.breateLed(ledPin)","description":"呼吸灯","prefix":"led.breateLed(ledPin)"},"led.levelLed(ledPin, bl, bd, cnt, gap)    ":{"body":"led.levelLed(ledPin, bl, bd, cnt, gap)    ","description":"等级指示灯","prefix":"led.levelLed(ledPin, bl, bd, cnt, gap)    "},"log.debug(tag, ...)":{"body":"log.debug(tag, ...)","description":"输出debug级别的日志","prefix":"log.debug(tag, ...)"},"log.error(tag, ...)":{"body":"log.error(tag, ...)","description":"输出error级别的日志","prefix":"log.error(tag, ...)"},"log.fatal(tag, ...)":{"body":"log.fatal(tag, ...)","description":"输出fatal级别的日志","prefix":"log.fatal(tag, ...)"},"log.info(tag, ...)":{"body":"log.info(tag, ...)","description":"输出info级别的日志","prefix":"log.info(tag, ...)"},"log.openTrace(v, uartid, baudrate)":{"body":"log.openTrace(v, uartid, baudrate)","description":"开启或者关闭print的打印输出功能","prefix":"log.openTrace(v, uartid, baudrate)"},"log.trace(tag, ...)":{"body":"log.trace(tag, ...)","description":"输出trace级别的日志","prefix":"log.trace(tag, ...)"},"log.warn(tag, ...)":{"body":"log.warn(tag, ...)","description":"输出warn级别的日志","prefix":"log.warn(tag, ...)"},"math.abs()":{"body":"math.abs()","description":"计算绝对值","prefix":"math.abs()"},"math.acos()":{"body":"math.acos()","description":"计算反余弦值","prefix":"math.acos()"},"math.asin()":{"body":"math.asin()","description":"计算反正弦值","prefix":"math.asin()"},"math.atan()":{"body":"math.atan()","description":"计算反正切值","prefix":"math.atan()"},"math.ceil()":{"body":"math.ceil()","description":"计算最小整数值","prefix":"math.ceil()"},"math.cos()":{"body":"math.cos()","description":"计算余弦值","prefix":"math.cos()"},"math.deg()":{"body":"math.deg()","description":"弧度转换为角度","prefix":"math.deg()"},"math.exp()":{"body":"math.exp()","description":"计算 *ex* （*e*为自然对数的底 ）的值","prefix":"math.exp()"},"math.floor()":{"body":"math.floor()","description":"计算不大于 x 的最大整数值。","prefix":"math.floor()"},"math.fmod()":{"body":"math.fmod()","description":"计算 x 除以 y，将商向零圆整后的余数","prefix":"math.fmod()"},"math.huge":{"body":"math.huge","description":"浮点数 HUGE_VAL， 这个数比任何数字值都大。","prefix":"math.huge"},"math.log()":{"body":"math.log()","description":"计算指定底的 x 的对数。 默认的 base 是 *e* （因此此函数返回 x 的自然对数）。","prefix":"math.log()"},"math.max()":{"body":"math.max()","description":"计算参数中最大的值， 大小由 Lua 操作 < 决定。","prefix":"math.max()"},"math.maxinteger":{"body":"math.maxinteger","description":"最大值的整数。","prefix":"math.maxinteger"},"math.min()":{"body":"math.min()","description":"返回参数中最小的值， 大小由 Lua 操作 < 决定。","prefix":"math.min()"},"math.mininteger":{"body":"math.mininteger","description":"最小值的整数。","prefix":"math.mininteger"},"math.modf()":{"body":"math.modf()","description":"计算 x 的整数部分和小数部分。","prefix":"math.modf()"},"math.pi":{"body":"math.pi","description":"*π* 的值。","prefix":"math.pi"},"math.rad()":{"body":"math.rad()","description":"将角 x 从角度转换为弧度。","prefix":"math.rad()"},"math.random()":{"body":"math.random()","description":"随机数","prefix":"math.random()"},"math.randomseed()":{"body":"math.randomseed()","description":"把 x设为伪随机数发生器的“种子”： 相同的种子产生相同的随机数列。","prefix":"math.randomseed()"},"math.sin()":{"body":"math.sin()","description":"计算x正弦值（假定参数是弧度）","prefix":"math.sin()"},"math.sqrt()":{"body":"math.sqrt()","description":"计算x平方根","prefix":"math.sqrt()"},"math.tan()":{"body":"math.tan()","description":"计算 x 的正切值，（假定参数是弧度）","prefix":"math.tan()"},"math.tointeger()":{"body":"math.tointeger()","description":"将参数转换为整数","prefix":"math.tointeger()"},"math.type()":{"body":"math.type()","description":"判断数字类型","prefix":"math.type()"},"math.ult()":{"body":"math.ult()","description":"数值比较","prefix":"math.ult()"},"misc.closePwm(id)":{"body":"misc.closePwm(id)","description":"关闭PWM","prefix":"misc.closePwm(id)"},"misc.getCalib()":{"body":"misc.getCalib()","description":"获取校准标志","prefix":"misc.getCalib()"},"misc.getClock()":{"body":"misc.getClock()","description":"获取系统时间","prefix":"misc.getClock()"},"misc.getImei()":{"body":"misc.getImei()","description":"获取模块IMEI","prefix":"misc.getImei()"},"misc.getMuid()":{"body":"misc.getMuid()","description":"获取模块MUID","prefix":"misc.getMuid()"},"misc.getSn()":{"body":"misc.getSn()","description":"获取模块序列号","prefix":"misc.getSn()"},"misc.getVbatt()":{"body":"misc.getVbatt()","description":"获取VBAT的电池电压","prefix":"misc.getVbatt()"},"misc.getWeek()":{"body":"misc.getWeek()","description":"获取星期","prefix":"misc.getWeek()"},"misc.openPwm(id, period, level)":{"body":"misc.openPwm(id, period, level)","description":"打开并且配置PWM(支持2路PWM，仅支持输出)","prefix":"misc.openPwm(id, period, level)"},"misc.setClock(t, cbFnc)":{"body":"misc.setClock(t, cbFnc)","description":"设置系统时间","prefix":"misc.setClock(t, cbFnc)"},"misc.setImei(s, cbFnc)":{"body":"misc.setImei(s, cbFnc)","description":"设置IMEI","prefix":"misc.setImei(s, cbFnc)"},"misc.setSn(s, cbFnc)":{"body":"misc.setSn(s, cbFnc)","description":"设置SN","prefix":"misc.setSn(s, cbFnc)"},"mqtt.client(clientId, keepAlive, username, password, cleanSession, will, version)":{"body":"mqtt.client(clientId, keepAlive, username, password, cleanSession, will, version)","description":"创建一个mqtt client实例","prefix":"mqtt.client(clientId, keepAlive, username, password, cleanSession, will, version)"},"mqttc:connect(host, port, transport, cert, timeout)":{"body":"mqttc:connect(host, port, transport, cert, timeout)","description":"连接mqtt服务器","prefix":"mqttc:connect(host, port, transport, cert, timeout)"},"mqttc:disconnect()":{"body":"mqttc:disconnect()","description":"断开与服务器的连接","prefix":"mqttc:disconnect()"},"mqttc:publish(topic, payload, qos, retain)":{"body":"mqttc:publish(topic, payload, qos, retain)","description":"发布一条消息","prefix":"mqttc:publish(topic, payload, qos, retain)"},"mqttc:receive(timeout, msg)":{"body":"mqttc:receive(timeout, msg)","description":"接收消息","prefix":"mqttc:receive(timeout, msg)"},"mqttc:subscribe(topic, qos)":{"body":"mqttc:subscribe(topic, qos)","description":"订阅主题","prefix":"mqttc:subscribe(topic, qos)"},"mqttc:unsubscribe(topic)":{"body":"mqttc:unsubscribe(topic)","description":"取消订阅主题","prefix":"mqttc:unsubscribe(topic)"},"mt:asyncRecv()":{"body":"mt:asyncRecv()","description":"异步接收数据","prefix":"mt:asyncRecv()"},"mt:asyncSelect(keepAlive, pingreq)":{"body":"mt:asyncSelect(keepAlive, pingreq)","description":"异步收发选择器","prefix":"mt:asyncSelect(keepAlive, pingreq)"},"mt:asyncSend(data)":{"body":"mt:asyncSend(data)","description":"异步发送数据","prefix":"mt:asyncSend(data)"},"mt:close(slow)":{"body":"mt:close(slow)","description":"销毁一个socket","prefix":"mt:close(slow)"},"mt:connect(address, port, timeout)":{"body":"mt:connect(address, port, timeout)","description":"连接服务器","prefix":"mt:connect(address, port, timeout)"},"mt:recv(timeout, msg)":{"body":"mt:recv(timeout, msg)","description":"接收数据","prefix":"mt:recv(timeout, msg)"},"mt:send(data)":{"body":"mt:send(data)","description":"发送数据","prefix":"mt:send(data)"},"net.cengQueryPoll(period)":{"body":"net.cengQueryPoll(period)","description":"发起查询基站信息(当前和临近小区信息)的请求","prefix":"net.cengQueryPoll(period)"},"net.csqQueryPoll(period)":{"body":"net.csqQueryPoll(period)","description":"发起查询信号强度的请求","prefix":"net.csqQueryPoll(period)"},"net.getCellInfo()":{"body":"net.getCellInfo()","description":"获取当前和临近位置区、小区以及信号强度的拼接字符串","prefix":"net.getCellInfo()"},"net.getCellInfoExt()":{"body":"net.getCellInfoExt()","description":"获取当前和临近位置区、小区、mcc、mnc、以及信号强度的拼接字符串","prefix":"net.getCellInfoExt()"},"net.getCi()":{"body":"net.getCi()","description":"获取当前小区ID","prefix":"net.getCi()"},"net.getLac()":{"body":"net.getLac()","description":"获取当前位置区ID","prefix":"net.getLac()"},"net.getMcc()":{"body":"net.getMcc()","description":"获取当前小区的mcc","prefix":"net.getMcc()"},"net.getMnc()":{"body":"net.getMnc()","description":"获取当前小区的mnc","prefix":"net.getMnc()"},"net.getMultiCell(cbFnc)":{"body":"net.getMultiCell(cbFnc)","description":"实时读取“当前和临近小区信息”","prefix":"net.getMultiCell(cbFnc)"},"net.getRssi()":{"body":"net.getRssi()","description":"获取信号强度","prefix":"net.getRssi()"},"net.getState()":{"body":"net.getState()","description":"获取GSM网络注册状态","prefix":"net.getState()"},"net.getTa()":{"body":"net.getTa()","description":"获取TA值","prefix":"net.getTa()"},"net.startQueryAll(...)":{"body":"net.startQueryAll(...)","description":"设置查询信号强度和基站信息的间隔","prefix":"net.startQueryAll(...)"},"net.stopQueryAll()":{"body":"net.stopQueryAll()","description":"停止查询信号强度和基站信息","prefix":"net.stopQueryAll()"},"net.switchFly(mode)":{"body":"net.switchFly(mode)","description":"设置飞行模式","prefix":"net.switchFly(mode)"},"netLed.setup(flag, pin)":{"body":"netLed.setup(flag, pin)","description":"配置网络指示灯并且立即执行配置后的动作","prefix":"netLed.setup(flag, pin)"},"netLed.updateBlinkTime(state, on, off)":{"body":"netLed.updateBlinkTime(state, on, off)","description":"配置某种工作状态下指示灯点亮和熄灭的时长（如果用户不配置，使用netLed.lua中ledBlinkTime配置的默认值）","prefix":"netLed.updateBlinkTime(state, on, off)"},"ntp.getServers()":{"body":"ntp.getServers()","description":"获取NTP服务器地址列表","prefix":"ntp.getServers()"},"ntp.isEnd()":{"body":"ntp.isEnd()","description":"NTP同步标志","prefix":"ntp.isEnd()"},"ntp.ntpTime(ts, fnc, fun)":{"body":"ntp.ntpTime(ts, fnc, fun)","description":"同步时间，每个NTP服务器尝试3次，超时8秒,适用于被任务函数调用","prefix":"ntp.ntpTime(ts, fnc, fun)"},"ntp.setServers(st)":{"body":"ntp.setServers(st)","description":"设置NTP服务器地址列表","prefix":"ntp.setServers(st)"},"ntp.timeSync(ts, fnc, fun)":{"body":"ntp.timeSync(ts, fnc, fun)","description":"自动同步时间任务适合独立执行.","prefix":"ntp.timeSync(ts, fnc, fun)"},"nvm.flush()":{"body":"nvm.flush()","description":"所有参数立即写入文件系统","prefix":"nvm.flush()"},"nvm.get(k)":{"body":"nvm.get(k)","description":"读取某个参数的值","prefix":"nvm.get(k)"},"nvm.gett(k, kk)":{"body":"nvm.gett(k, kk)","description":"读取某个table类型参数的某一个索引的值","prefix":"nvm.gett(k, kk)"},"nvm.init(defaultCfgFile)":{"body":"nvm.init(defaultCfgFile)","description":"初始化参数存储模块","prefix":"nvm.init(defaultCfgFile)"},"nvm.remove()":{"body":"nvm.remove()","description":"请求删除参数文件.","prefix":"nvm.remove()"},"nvm.restore()":{"body":"nvm.restore()","description":"参数恢复出厂设置","prefix":"nvm.restore()"},"nvm.set(k, v, r, s)":{"body":"nvm.set(k, v, r, s)","description":"设置某个参数的值","prefix":"nvm.set(k, v, r, s)"},"nvm.sett(k, kk, v, r, s)":{"body":"nvm.sett(k, kk, v, r, s)","description":"设置某个table类型参数的某一个索引的值","prefix":"nvm.sett(k, kk, v, r, s)"},"pack.pack()":{"body":"pack.pack()","description":"打包字符串的值,在pack的时候有符号 无符号的输出结果都是一样的 unpack时有符号跟无符号才有区别","prefix":"pack.pack()"},"pack.unpack()":{"body":"pack.unpack()","description":"解包字符串","prefix":"pack.unpack()"},"pb.delete(index, cb)":{"body":"pb.delete(index, cb)","description":"删除一条电话本记录","prefix":"pb.delete(index, cb)"},"pb.read(index, cb)":{"body":"pb.read(index, cb)","description":"读取一条电话本记录","prefix":"pb.read(index, cb)"},"pb.setStorage(storage, cb)":{"body":"pb.setStorage(storage, cb)","description":"设置电话本存储区域","prefix":"pb.setStorage(storage, cb)"},"pb.write(index, name, num, cb)":{"body":"pb.write(index, name, num, cb)","description":"写入一条电话本记录","prefix":"pb.write(index, name, num, cb)"},"pins.close(pin)":{"body":"pins.close(pin)","description":"关闭GPIO模式","prefix":"pins.close(pin)"},"pins.setup(pin, val, pull)":{"body":"pins.setup(pin, val, pull)","description":"配置GPIO模式","prefix":"pins.setup(pin, val, pull)"},"pio.pin.getval()":{"body":"pio.pin.getval()","description":"读取管脚的值","prefix":"pio.pin.getval()"},"pio.pin.setdir()":{"body":"pio.pin.setdir()","description":"设置管脚的描述","prefix":"pio.pin.setdir()"},"pio.pin.sethigh()":{"body":"pio.pin.sethigh()","description":"设置管脚为高电平(1)","prefix":"pio.pin.sethigh()"},"pio.pin.setlow()":{"body":"pio.pin.setlow()","description":"设置管脚为低电平(0)","prefix":"pio.pin.setlow()"},"pio.pin.setpull()":{"body":"pio.pin.setpull()","description":"配置IO口默认状态","prefix":"pio.pin.setpull()"},"pio.pin.setval()":{"body":"pio.pin.setval()","description":"设置管脚的值","prefix":"pio.pin.setval()"},"pm.isSleep(tag)":{"body":"pm.isSleep(tag)","description":"pm.isSleep([tag]) 读取某个Lua应用或者全局的休眠状态","prefix":"pm.isSleep(tag)"},"pm.sleep(tag)":{"body":"pm.sleep(tag)","description":"某个Lua应用休眠系统","prefix":"pm.sleep(tag)"},"pm.wake(tag)":{"body":"pm.wake(tag)","description":"某个Lua应用唤醒系统","prefix":"pm.wake(tag)"},"pmd.init()":{"body":"pmd.init()","description":"设置电源管理参数 <br>","prefix":"pmd.init()"},"pmd.ldoset()":{"body":"pmd.ldoset()","description":"ldo 控制","prefix":"pmd.ldoset()"},"pmd.sleep()":{"body":"pmd.sleep()","description":"省电控制","prefix":"pmd.sleep()"},"powerKey.setup(longPrd, longCb, shortCb)":{"body":"powerKey.setup(longPrd, longCb, shortCb)","description":"配置开机键长按弹起和短按弹起的功能.","prefix":"powerKey.setup(longPrd, longCb, shortCb)"},"qrencode.encode ()":{"body":"qrencode.encode ()","description":"创建二维码信息","prefix":"qrencode.encode ()"},"record.delete()":{"body":"record.delete()","description":"删除录音","prefix":"record.delete()"},"record.exists()":{"body":"record.exists()","description":"判断是否存在录音","prefix":"record.exists()"},"record.getData(offset, len)":{"body":"record.getData(offset, len)","description":"读取录音数据","prefix":"record.getData(offset, len)"},"record.getFilePath()":{"body":"record.getFilePath()","description":"读取录音文件的完整路径","prefix":"record.getFilePath()"},"record.getSize()":{"body":"record.getSize()","description":"读取录音文件总长度，录音时长","prefix":"record.getSize()"},"record.isBusy()":{"body":"record.isBusy()","description":"是否正在处理录音","prefix":"record.isBusy()"},"record.start(seconds, cb)":{"body":"record.start(seconds, cb)","description":"开始录音","prefix":"record.start(seconds, cb)"},"record.stop(cbFnc)":{"body":"record.stop(cbFnc)","description":"停止录音","prefix":"record.stop(cbFnc)"},"ril.deRegUrc(prefix)":{"body":"ril.deRegUrc(prefix)","description":"解注册某个urc的处理函数","prefix":"ril.deRegUrc(prefix)"},"ril.regRsp(head, fnc, typ, formt)":{"body":"ril.regRsp(head, fnc, typ, formt)","description":"注册某个AT命令应答的处理函数","prefix":"ril.regRsp(head, fnc, typ, formt)"},"ril.regUrc(prefix, handler)":{"body":"ril.regUrc(prefix, handler)","description":"注册某个urc的处理函数","prefix":"ril.regUrc(prefix, handler)"},"ril.request(cmd, arg, onrsp, delay)":{"body":"ril.request(cmd, arg, onrsp, delay)","description":"发送AT命令到底层软件","prefix":"ril.request(cmd, arg, onrsp, delay)"},"rtos.get_env_usage()":{"body":"rtos.get_env_usage()","description":"获取 lua 任务消息队列的使用百分比","prefix":"rtos.get_env_usage()"},"rtos.get_fs_free_size()":{"body":"rtos.get_fs_free_size()","description":"获取文件系统剩余空间","prefix":"rtos.get_fs_free_size()"},"rtos.make_dir()":{"body":"rtos.make_dir()","description":"创建目录","prefix":"rtos.make_dir()"},"rtos.on (id, handler)":{"body":"rtos.on (id, handler)","description":"注册rtos消息回调处理函数","prefix":"rtos.on (id, handler)"},"rtos.poweroff()":{"body":"rtos.poweroff()","description":"软件关机","prefix":"rtos.poweroff()"},"rtos.poweron()":{"body":"rtos.poweron()","description":"是否启动 GSM 开机","prefix":"rtos.poweron()"},"rtos.poweron_reason()":{"body":"rtos.poweron_reason()","description":"读取开机原因值","prefix":"rtos.poweron_reason()"},"rtos.receive()":{"body":"rtos.receive()","description":"接收消息","prefix":"rtos.receive()"},"rtos.remove_dir()":{"body":"rtos.remove_dir()","description":"删除文件夹","prefix":"rtos.remove_dir()"},"rtos.restart()":{"body":"rtos.restart()","description":"软件重启","prefix":"rtos.restart()"},"rtos.set_alarm()":{"body":"rtos.set_alarm()","description":"设置闹钟，在设置之前必须注册闹钟模块和注册消息回调函数","prefix":"rtos.set_alarm()"},"rtos.sleep()":{"body":"rtos.sleep()","description":"延时函数","prefix":"rtos.sleep()"},"rtos.tick()":{"body":"rtos.tick()","description":"获取系统开机运行时间总计数","prefix":"rtos.tick()"},"rtos.timer_start()":{"body":"rtos.timer_start()","description":"启动定时器","prefix":"rtos.timer_start()"},"rtos.timer_stop()":{"body":"rtos.timer_stop()","description":"停止定时器","prefix":"rtos.timer_stop()"},"scanCode.request(cbFnc, timeout)":{"body":"scanCode.request(cbFnc, timeout)","description":"设置扫码请求","prefix":"scanCode.request(cbFnc, timeout)"},"sim.getIccid()":{"body":"sim.getIccid()","description":"获取sim卡的iccid","prefix":"sim.getIccid()"},"sim.getImsi()":{"body":"sim.getImsi()","description":"获取sim卡的imsi","prefix":"sim.getImsi()"},"sim.getMcc()":{"body":"sim.getMcc()","description":"获取sim卡的mcc","prefix":"sim.getMcc()"},"sim.getMnc()":{"body":"sim.getMnc()","description":"获取sim卡的getmnc","prefix":"sim.getMnc()"},"sim.getStatus()":{"body":"sim.getStatus()","description":"获取sim卡的状态","prefix":"sim.getStatus()"},"sim.getType()":{"body":"sim.getType()","description":"获取sim卡类型","prefix":"sim.getType()"},"sms.send(num, data, cbFnc, idx)":{"body":"sms.send(num, data, cbFnc, idx)","description":"发送短信","prefix":"sms.send(num, data, cbFnc, idx)"},"sms.setNewSmsCb(cbFnc)":{"body":"sms.setNewSmsCb(cbFnc)","description":"设置新短信的用户处理函数","prefix":"sms.setNewSmsCb(cbFnc)"},"socket.setDnsParser(parserFnc)":{"body":"socket.setDnsParser(parserFnc)","description":"设置用户自定义的DNS解析器.","prefix":"socket.setDnsParser(parserFnc)"},"socket.setSendMode(mode)":{"body":"socket.setSendMode(mode)","description":"设置数据发送模式（在网络准备就绪之前调用此接口设置）.","prefix":"socket.setSendMode(mode)"},"socket.setTcpResendPara(retryCnt, retryMaxTimeout)":{"body":"socket.setTcpResendPara(retryCnt, retryMaxTimeout)","description":"设置TCP层自动重传的参数","prefix":"socket.setTcpResendPara(retryCnt, retryMaxTimeout)"},"socket.tcp(ssl, cert)":{"body":"socket.tcp(ssl, cert)","description":"创建基于TCP的socket对象","prefix":"socket.tcp(ssl, cert)"},"socket.udp()":{"body":"socket.udp()","description":"创建基于UDP的socket对象","prefix":"socket.udp()"},"spi.close()":{"body":"spi.close()","description":"关闭SPI","prefix":"spi.close()"},"spi.recv()":{"body":"spi.recv()","description":"读数据","prefix":"spi.recv()"},"spi.send()":{"body":"spi.send()","description":"写数据","prefix":"spi.send()"},"spi.send_recv()":{"body":"spi.send_recv()","description":"读写数据","prefix":"spi.send_recv()"},"spi.setup":{"body":"spi.setup","description":"- 语法","prefix":"spi.setup"},"string.byte()":{"body":"string.byte()","description":"接收控制字符，返回ASCII码","prefix":"string.byte()"},"string.char()":{"body":"string.char()","description":"接收ASCII码，返回对应的控制字符","prefix":"string.char()"},"string.find()":{"body":"string.find()","description":"查找第一个字符串 s 中匹配到的 pattern","prefix":"string.find()"},"string.format()":{"body":"string.format()","description":"格式化字符串","prefix":"string.format()"},"string.formatNumberThousands(num)":{"body":"string.formatNumberThousands(num)","description":"返回数字的千位符号格式","prefix":"string.formatNumberThousands(num)"},"string.fromHex(hex)":{"body":"string.fromHex(hex)","description":"将HEX字符串转成Lua字符串，如\"313233616263\"转为\"123abc\", 函数里加入了过滤分隔符，可以过滤掉大部分分隔符（可参见正则表达式中\\s和\\p的范围）。","prefix":"string.fromHex(hex)"},"string.gsub()":{"body":"string.gsub()","description":"字符串替换","prefix":"string.gsub()"},"string.len()":{"body":"string.len()","description":"计算字符串长度","prefix":"string.len()"},"string.lower()":{"body":"string.lower()","description":"字符串全部转为小写字母","prefix":"string.lower()"},"string.rawurlEncode(str)":{"body":"string.rawurlEncode(str)","description":"返回字符串的 RFC3986 编码","prefix":"string.rawurlEncode(str)"},"string.rep()":{"body":"string.rep()","description":"字符串拷贝","prefix":"string.rep()"},"string.reverse()":{"body":"string.reverse()","description":"字符串反转","prefix":"string.reverse()"},"string.split(str, delimiter)":{"body":"string.split(str, delimiter)","description":"按照指定分隔符分割字符串","prefix":"string.split(str, delimiter)"},"string.toHex(str, separator)":{"body":"string.toHex(str, separator)","description":"将Lua字符串转成HEX字符串，如\"123abc\"转为\"313233616263\"","prefix":"string.toHex(str, separator)"},"string.toValue(str)":{"body":"string.toValue(str)","description":"返回字符串tonumber的转义字符串(用来支持超过31位整数的转换)","prefix":"string.toValue(str)"},"string.upper()":{"body":"string.upper()","description":"字符串全部转为大写字母","prefix":"string.upper()"},"string.urlEncode(str)":{"body":"string.urlEncode(str)","description":"返回字符串的urlEncode编码","prefix":"string.urlEncode(str)"},"string.utf8Len(str)":{"body":"string.utf8Len(str)","description":"返回utf8编码字符串的长度","prefix":"string.utf8Len(str)"},"string.utf8ToTable(str)":{"body":"string.utf8ToTable(str)","description":"返回utf8编码字符串的单个utf8字符的table","prefix":"string.utf8ToTable(str)"},"sys.init(mode, lprfnc)":{"body":"sys.init(mode, lprfnc)","description":"Luat平台初始化","prefix":"sys.init(mode, lprfnc)"},"sys.publish(...)":{"body":"sys.publish(...)","description":"发布内部消息，存储在内部消息队列中","prefix":"sys.publish(...)"},"sys.restart(r)":{"body":"sys.restart(r)","description":"软件重启","prefix":"sys.restart(r)"},"sys.run()":{"body":"sys.run()","description":"run()从底层获取core消息并及时处理相关消息，查询定时器并调度各注册成功的任务线程运行和挂起","prefix":"sys.run()"},"sys.setRollBack(flag, secs)":{"body":"sys.setRollBack(flag, secs)","description":"设置“lua脚本运行出错时，是否回退原始烧写版本”的功能开关。如果没有调用此接口设置，默认回滚","prefix":"sys.setRollBack(flag, secs)"},"sys.subscribe(id, callback)":{"body":"sys.subscribe(id, callback)","description":"订阅消息","prefix":"sys.subscribe(id, callback)"},"sys.taskInit(fun, ...)":{"body":"sys.taskInit(fun, ...)","description":"创建一个任务线程,在模块最末行调用该函数并注册模块中的任务函数，main.lua导入该模块即可","prefix":"sys.taskInit(fun, ...)"},"sys.timerIsActive(val, ...)":{"body":"sys.timerIsActive(val, ...)","description":"判断某个定时器是否处于开启状态","prefix":"sys.timerIsActive(val, ...)"},"sys.timerLoopStart(fnc, ms, ...)":{"body":"sys.timerLoopStart(fnc, ms, ...)","description":"开启一个循环定时器","prefix":"sys.timerLoopStart(fnc, ms, ...)"},"sys.timerStart(fnc, ms, ...)":{"body":"sys.timerStart(fnc, ms, ...)","description":"开启一个定时器","prefix":"sys.timerStart(fnc, ms, ...)"},"sys.timerStop(val, ...)":{"body":"sys.timerStop(val, ...)","description":"关闭定时器","prefix":"sys.timerStop(val, ...)"},"sys.timerStopAll(fnc)":{"body":"sys.timerStopAll(fnc)","description":"关闭同一回调函数的所有定时器","prefix":"sys.timerStopAll(fnc)"},"sys.unsubscribe(id, callback)":{"body":"sys.unsubscribe(id, callback)","description":"取消订阅消息","prefix":"sys.unsubscribe(id, callback)"},"sys.wait(ms)":{"body":"sys.wait(ms)","description":"Task任务延时函数，只能用于任务函数中","prefix":"sys.wait(ms)"},"sys.waitUntil(id, ms)":{"body":"sys.waitUntil(id, ms)","description":"Task任务的条件等待函数（包括事件消息和定时器消息等条件），只能用于任务函数中。","prefix":"sys.waitUntil(id, ms)"},"sys.waitUntilExt(id, ms)":{"body":"sys.waitUntilExt(id, ms)","description":"Task任务的条件等待函数扩展（包括事件消息和定时器消息等条件），只能用于任务函数中。","prefix":"sys.waitUntilExt(id, ms)"},"table.concat()":{"body":"table.concat()","description":"表连接","prefix":"table.concat()"},"table.gsort(t, f)":{"body":"table.gsort(t, f)","description":"返回一个迭代器函数,每次调用函数都会返回hash表的排序后的键值对","prefix":"table.gsort(t, f)"},"table.insert()":{"body":"table.insert()","description":"添加table参数","prefix":"table.insert()"},"table.rconcat(l)":{"body":"table.rconcat(l)","description":"table.concat的增强版，支持嵌套字符串数组","prefix":"table.rconcat(l)"},"table.remove()":{"body":"table.remove()","description":"移除table参数","prefix":"table.remove()"},"uart.close()":{"body":"uart.close()","description":"关闭 uart 接口","prefix":"uart.close()"},"uart.getchar()":{"body":"uart.getchar()","description":"从串口读取单字符","prefix":"uart.getchar()"},"uart.on (id, event, callback)":{"body":"uart.on (id, event, callback)","description":"注册串口事件的处理函数","prefix":"uart.on (id, event, callback)"},"uart.read()":{"body":"uart.read()","description":"从串口读取字符串","prefix":"uart.read()"},"uart.set_rs485_oe()":{"body":"uart.set_rs485_oe()","description":"* 语法","prefix":"uart.set_rs485_oe()"},"uart.setup()":{"body":"uart.setup()","description":"uart通讯","prefix":"uart.setup()"},"uart.write()":{"body":"uart.write()","description":"向串口写字符串或者整型数据","prefix":"uart.write()"},"uiWin.add(wnd)":{"body":"uiWin.add(wnd)","description":"新增一个窗口","prefix":"uiWin.add(wnd)"},"uiWin.isActive(winId)":{"body":"uiWin.isActive(winId)","description":"判断一个窗口是否处于最前显示","prefix":"uiWin.isActive(winId)"},"uiWin.remove(winId)":{"body":"uiWin.remove(winId)","description":"移除一个窗口","prefix":"uiWin.remove(winId)"},"update.request(cbFnc, url, period, redir)":{"body":"update.request(cbFnc, url, period, redir)","description":"启动远程升级功能","prefix":"update.request(cbFnc, url, period, redir)"},"wdt.restart(rst, wd)":{"body":"wdt.restart(rst, wd)","description":"硬件看门狗立即重启模块","prefix":"wdt.restart(rst, wd)"},"wdt.setup(rst, wd)":{"body":"wdt.setup(rst, wd)","description":"配置模块与看门狗通讯IO并启动任务","prefix":"wdt.setup(rst, wd)"}}